/*
* generated by Xtext
*/
grammar InternalCircuitDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.ac.jaist.kslab.sb.marte.dsl.circuit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.ac.jaist.kslab.sb.marte.dsl.circuit.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.ac.jaist.kslab.sb.marte.dsl.circuit.services.CircuitDslGrammarAccess;

}

@parser::members {

 	private CircuitDslGrammarAccess grammarAccess;
 	
    public InternalCircuitDslParser(TokenStream input, CircuitDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "HwCircuitDiagram";	
   	}
   	
   	@Override
   	protected CircuitDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleHwCircuitDiagram
entryRuleHwCircuitDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHwCircuitDiagramRule()); }
	 iv_ruleHwCircuitDiagram=ruleHwCircuitDiagram 
	 { $current=$iv_ruleHwCircuitDiagram.current; } 
	 EOF 
;

// Rule HwCircuitDiagram
ruleHwCircuitDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHwCircuitDiagramAccess().getHwCircuitDiagramAction_0(),
            $current);
    }
)	otherlv_1='net {' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHwCircuitDiagramAccess().getNetKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHwCircuitDiagramAccess().getWiresHwWireParserRuleCall_2_0()); 
	    }
		lv_wires_2_0=ruleHwWire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHwCircuitDiagramRule());
	        }
       		add(
       			$current, 
       			"wires",
        		lv_wires_2_0, 
        		"HwWire");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHwCircuitDiagramAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHwCircuitDiagramAccess().getWiresHwWireParserRuleCall_3_1_0()); 
	    }
		lv_wires_4_0=ruleHwWire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHwCircuitDiagramRule());
	        }
       		add(
       			$current, 
       			"wires",
        		lv_wires_4_0, 
        		"HwWire");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHwCircuitDiagramAccess().getRightCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHwCircuitDiagramAccess().getComponentsHwComponentsParserRuleCall_5_0()); 
	    }
		lv_components_6_0=ruleHwComponents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHwCircuitDiagramRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_6_0, 
        		"HwComponents");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleHwComponents
entryRuleHwComponents returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHwComponentsRule()); }
	 iv_ruleHwComponents=ruleHwComponents 
	 { $current=$iv_ruleHwComponents.current; } 
	 EOF 
;

// Rule HwComponents
ruleHwComponents returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHwComponentsAccess().getComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHwComponentsAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHwComponentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHwComponentsAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHwComponentsAccess().getPinsHwPackagePinParserRuleCall_3_0()); 
	    }
		lv_pins_3_0=ruleHwPackagePin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHwComponentsRule());
	        }
       		add(
       			$current, 
       			"pins",
        		lv_pins_3_0, 
        		"HwPackagePin");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHwComponentsAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHwComponentsAccess().getPinsHwPackagePinParserRuleCall_4_1_0()); 
	    }
		lv_pins_5_0=ruleHwPackagePin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHwComponentsRule());
	        }
       		add(
       			$current, 
       			"pins",
        		lv_pins_5_0, 
        		"HwPackagePin");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHwComponentsAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleHwPackagePin
entryRuleHwPackagePin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHwPackagePinRule()); }
	 iv_ruleHwPackagePin=ruleHwPackagePin 
	 { $current=$iv_ruleHwPackagePin.current; } 
	 EOF 
;

// Rule HwPackagePin
ruleHwPackagePin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHwPackagePinAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHwPackagePinRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHwPackagePinAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHwPackagePinRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getHwPackagePinAccess().getWireHwWireCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleHwWire
entryRuleHwWire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHwWireRule()); }
	 iv_ruleHwWire=ruleHwWire 
	 { $current=$iv_ruleHwWire.current; } 
	 EOF 
;

// Rule HwWire
ruleHwWire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHwWireAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHwWireRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


