/*
* generated by Xtext
*/

package jp.ac.jaist.kslab.sb.marte.dsl.circuit.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CircuitDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HwCircuitDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HwCircuitDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHwCircuitDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWiresHwWireParserRuleCall_2_0 = (RuleCall)cWiresAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWiresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWiresHwWireParserRuleCall_3_1_0 = (RuleCall)cWiresAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsHwComponentsParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		
		//HwCircuitDiagram:
		//	{HwCircuitDiagram} "net {" wires+=HwWire ("," wires+=HwWire)* "}" components+=HwComponents*;
		public ParserRule getRule() { return rule; }

		//{HwCircuitDiagram} "net {" wires+=HwWire ("," wires+=HwWire)* "}" components+=HwComponents*
		public Group getGroup() { return cGroup; }

		//{HwCircuitDiagram}
		public Action getHwCircuitDiagramAction_0() { return cHwCircuitDiagramAction_0; }

		//"net {"
		public Keyword getNetKeyword_1() { return cNetKeyword_1; }

		//wires+=HwWire
		public Assignment getWiresAssignment_2() { return cWiresAssignment_2; }

		//HwWire
		public RuleCall getWiresHwWireParserRuleCall_2_0() { return cWiresHwWireParserRuleCall_2_0; }

		//("," wires+=HwWire)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//wires+=HwWire
		public Assignment getWiresAssignment_3_1() { return cWiresAssignment_3_1; }

		//HwWire
		public RuleCall getWiresHwWireParserRuleCall_3_1_0() { return cWiresHwWireParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//components+=HwComponents*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//HwComponents
		public RuleCall getComponentsHwComponentsParserRuleCall_5_0() { return cComponentsHwComponentsParserRuleCall_5_0; }
	}

	public class HwComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HwComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinsHwPackagePinParserRuleCall_3_0 = (RuleCall)cPinsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinsHwPackagePinParserRuleCall_4_1_0 = (RuleCall)cPinsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HwComponents returns HwPackage:
		//	"component" name=ID "{" pins+=HwPackagePin ("," pins+=HwPackagePin)* "}";
		public ParserRule getRule() { return rule; }

		//"component" name=ID "{" pins+=HwPackagePin ("," pins+=HwPackagePin)* "}"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pins+=HwPackagePin
		public Assignment getPinsAssignment_3() { return cPinsAssignment_3; }

		//HwPackagePin
		public RuleCall getPinsHwPackagePinParserRuleCall_3_0() { return cPinsHwPackagePinParserRuleCall_3_0; }

		//("," pins+=HwPackagePin)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//pins+=HwPackagePin
		public Assignment getPinsAssignment_4_1() { return cPinsAssignment_4_1; }

		//HwPackagePin
		public RuleCall getPinsHwPackagePinParserRuleCall_4_1_0() { return cPinsHwPackagePinParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class HwPackagePinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HwPackagePin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWireAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWireHwWireCrossReference_2_0 = (CrossReference)cWireAssignment_2.eContents().get(0);
		private final RuleCall cWireHwWireIDTerminalRuleCall_2_0_1 = (RuleCall)cWireHwWireCrossReference_2_0.eContents().get(1);
		
		//HwPackagePin:
		//	name=ID ":" wire+=[HwWire];
		public ParserRule getRule() { return rule; }

		//name=ID ":" wire+=[HwWire]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//wire+=[HwWire]
		public Assignment getWireAssignment_2() { return cWireAssignment_2; }

		//[HwWire]
		public CrossReference getWireHwWireCrossReference_2_0() { return cWireHwWireCrossReference_2_0; }

		//ID
		public RuleCall getWireHwWireIDTerminalRuleCall_2_0_1() { return cWireHwWireIDTerminalRuleCall_2_0_1; }
	}

	public class HwWireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HwWire");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//HwWire:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private HwCircuitDiagramElements pHwCircuitDiagram;
	private HwComponentsElements pHwComponents;
	private HwPackagePinElements pHwPackagePin;
	private HwWireElements pHwWire;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CircuitDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HwCircuitDiagram:
	//	{HwCircuitDiagram} "net {" wires+=HwWire ("," wires+=HwWire)* "}" components+=HwComponents*;
	public HwCircuitDiagramElements getHwCircuitDiagramAccess() {
		return (pHwCircuitDiagram != null) ? pHwCircuitDiagram : (pHwCircuitDiagram = new HwCircuitDiagramElements());
	}
	
	public ParserRule getHwCircuitDiagramRule() {
		return getHwCircuitDiagramAccess().getRule();
	}

	//HwComponents returns HwPackage:
	//	"component" name=ID "{" pins+=HwPackagePin ("," pins+=HwPackagePin)* "}";
	public HwComponentsElements getHwComponentsAccess() {
		return (pHwComponents != null) ? pHwComponents : (pHwComponents = new HwComponentsElements());
	}
	
	public ParserRule getHwComponentsRule() {
		return getHwComponentsAccess().getRule();
	}

	//HwPackagePin:
	//	name=ID ":" wire+=[HwWire];
	public HwPackagePinElements getHwPackagePinAccess() {
		return (pHwPackagePin != null) ? pHwPackagePin : (pHwPackagePin = new HwPackagePinElements());
	}
	
	public ParserRule getHwPackagePinRule() {
		return getHwPackagePinAccess().getRule();
	}

	//HwWire:
	//	name=ID;
	public HwWireElements getHwWireAccess() {
		return (pHwWire != null) ? pHwWire : (pHwWire = new HwWireElements());
	}
	
	public ParserRule getHwWireRule() {
		return getHwWireAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
