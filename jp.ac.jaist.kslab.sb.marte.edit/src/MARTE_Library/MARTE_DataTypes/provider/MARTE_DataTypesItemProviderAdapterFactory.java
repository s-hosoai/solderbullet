/**
 */
package MARTE_Library.MARTE_DataTypes.provider;

import MARTE_Library.MARTE_DataTypes.util.MARTE_DataTypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MARTE_DataTypesItemProviderAdapterFactory extends MARTE_DataTypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MARTE_DataTypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.IntegerVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVectorItemProvider integerVectorItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.IntegerVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVectorAdapter() {
		if (integerVectorItemProvider == null) {
			integerVectorItemProvider = new IntegerVectorItemProvider(this);
		}

		return integerVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.IntegerMatrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerMatrixItemProvider integerMatrixItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.IntegerMatrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerMatrixAdapter() {
		if (integerMatrixItemProvider == null) {
			integerMatrixItemProvider = new IntegerMatrixItemProvider(this);
		}

		return integerMatrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.IntegerInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerIntervalItemProvider integerIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.IntegerInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerIntervalAdapter() {
		if (integerIntervalItemProvider == null) {
			integerIntervalItemProvider = new IntegerIntervalItemProvider(this);
		}

		return integerIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.UtilityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilityTypeItemProvider utilityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.UtilityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilityTypeAdapter() {
		if (utilityTypeItemProvider == null) {
			utilityTypeItemProvider = new UtilityTypeItemProvider(this);
		}

		return utilityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.Interval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalItemProvider intervalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.Interval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalAdapter() {
		if (intervalItemProvider == null) {
			intervalItemProvider = new IntervalItemProvider(this);
		}

		return intervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.Realnterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealntervalItemProvider realntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.Realnterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealntervalAdapter() {
		if (realntervalItemProvider == null) {
			realntervalItemProvider = new RealntervalItemProvider(this);
		}

		return realntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.NFP_FrequencyInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_FrequencyIntervalItemProvider nfP_FrequencyIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.NFP_FrequencyInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_FrequencyIntervalAdapter() {
		if (nfP_FrequencyIntervalItemProvider == null) {
			nfP_FrequencyIntervalItemProvider = new NFP_FrequencyIntervalItemProvider(this);
		}

		return nfP_FrequencyIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.NFP_NaturalInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_NaturalIntervalItemProvider nfP_NaturalIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.NFP_NaturalInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_NaturalIntervalAdapter() {
		if (nfP_NaturalIntervalItemProvider == null) {
			nfP_NaturalIntervalItemProvider = new NFP_NaturalIntervalItemProvider(this);
		}

		return nfP_NaturalIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.RealVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealVectorItemProvider realVectorItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.RealVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealVectorAdapter() {
		if (realVectorItemProvider == null) {
			realVectorItemProvider = new RealVectorItemProvider(this);
		}

		return realVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.MARTE_DataTypes.RealMatrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealMatrixItemProvider realMatrixItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.MARTE_DataTypes.RealMatrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealMatrixAdapter() {
		if (realMatrixItemProvider == null) {
			realMatrixItemProvider = new RealMatrixItemProvider(this);
		}

		return realMatrixItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (integerVectorItemProvider != null) integerVectorItemProvider.dispose();
		if (integerMatrixItemProvider != null) integerMatrixItemProvider.dispose();
		if (integerIntervalItemProvider != null) integerIntervalItemProvider.dispose();
		if (utilityTypeItemProvider != null) utilityTypeItemProvider.dispose();
		if (arrayItemProvider != null) arrayItemProvider.dispose();
		if (intervalItemProvider != null) intervalItemProvider.dispose();
		if (realntervalItemProvider != null) realntervalItemProvider.dispose();
		if (nfP_FrequencyIntervalItemProvider != null) nfP_FrequencyIntervalItemProvider.dispose();
		if (nfP_NaturalIntervalItemProvider != null) nfP_NaturalIntervalItemProvider.dispose();
		if (realVectorItemProvider != null) realVectorItemProvider.dispose();
		if (realMatrixItemProvider != null) realMatrixItemProvider.dispose();
	}

}
