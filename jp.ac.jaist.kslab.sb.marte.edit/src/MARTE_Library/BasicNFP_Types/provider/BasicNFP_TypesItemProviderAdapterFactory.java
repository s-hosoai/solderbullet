/**
 */
package MARTE_Library.BasicNFP_Types.provider;

import MARTE_Library.BasicNFP_Types.util.BasicNFP_TypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BasicNFP_TypesItemProviderAdapterFactory extends BasicNFP_TypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BasicNFP_TypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_CommonType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_CommonTypeItemProvider nfP_CommonTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_CommonType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_CommonTypeAdapter() {
		if (nfP_CommonTypeItemProvider == null) {
			nfP_CommonTypeItemProvider = new NFP_CommonTypeItemProvider(this);
		}

		return nfP_CommonTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Frequency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_FrequencyItemProvider nfP_FrequencyItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Frequency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_FrequencyAdapter() {
		if (nfP_FrequencyItemProvider == null) {
			nfP_FrequencyItemProvider = new NFP_FrequencyItemProvider(this);
		}

		return nfP_FrequencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Real} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_RealItemProvider nfP_RealItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Real}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_RealAdapter() {
		if (nfP_RealItemProvider == null) {
			nfP_RealItemProvider = new NFP_RealItemProvider(this);
		}

		return nfP_RealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Natural} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_NaturalItemProvider nfP_NaturalItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Natural}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_NaturalAdapter() {
		if (nfP_NaturalItemProvider == null) {
			nfP_NaturalItemProvider = new NFP_NaturalItemProvider(this);
		}

		return nfP_NaturalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Boolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_BooleanItemProvider nfP_BooleanItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Boolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_BooleanAdapter() {
		if (nfP_BooleanItemProvider == null) {
			nfP_BooleanItemProvider = new NFP_BooleanItemProvider(this);
		}

		return nfP_BooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_String} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_StringItemProvider nfP_StringItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_String}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_StringAdapter() {
		if (nfP_StringItemProvider == null) {
			nfP_StringItemProvider = new NFP_StringItemProvider(this);
		}

		return nfP_StringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Integer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_IntegerItemProvider nfP_IntegerItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Integer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_IntegerAdapter() {
		if (nfP_IntegerItemProvider == null) {
			nfP_IntegerItemProvider = new NFP_IntegerItemProvider(this);
		}

		return nfP_IntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_DateTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_DateTimeItemProvider nfP_DateTimeItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_DateTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_DateTimeAdapter() {
		if (nfP_DateTimeItemProvider == null) {
			nfP_DateTimeItemProvider = new NFP_DateTimeItemProvider(this);
		}

		return nfP_DateTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_DataTxRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_DataTxRateItemProvider nfP_DataTxRateItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_DataTxRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_DataTxRateAdapter() {
		if (nfP_DataTxRateItemProvider == null) {
			nfP_DataTxRateItemProvider = new NFP_DataTxRateItemProvider(this);
		}

		return nfP_DataTxRateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Power} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_PowerItemProvider nfP_PowerItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Power}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_PowerAdapter() {
		if (nfP_PowerItemProvider == null) {
			nfP_PowerItemProvider = new NFP_PowerItemProvider(this);
		}

		return nfP_PowerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_DataSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_DataSizeItemProvider nfP_DataSizeItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_DataSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_DataSizeAdapter() {
		if (nfP_DataSizeItemProvider == null) {
			nfP_DataSizeItemProvider = new NFP_DataSizeItemProvider(this);
		}

		return nfP_DataSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Energy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_EnergyItemProvider nfP_EnergyItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Energy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_EnergyAdapter() {
		if (nfP_EnergyItemProvider == null) {
			nfP_EnergyItemProvider = new NFP_EnergyItemProvider(this);
		}

		return nfP_EnergyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Length} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_LengthItemProvider nfP_LengthItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Length}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_LengthAdapter() {
		if (nfP_LengthItemProvider == null) {
			nfP_LengthItemProvider = new NFP_LengthItemProvider(this);
		}

		return nfP_LengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Area} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_AreaItemProvider nfP_AreaItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Area}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_AreaAdapter() {
		if (nfP_AreaItemProvider == null) {
			nfP_AreaItemProvider = new NFP_AreaItemProvider(this);
		}

		return nfP_AreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.ArrivalPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrivalPatternItemProvider arrivalPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.ArrivalPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrivalPatternAdapter() {
		if (arrivalPatternItemProvider == null) {
			arrivalPatternItemProvider = new ArrivalPatternItemProvider(this);
		}

		return arrivalPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.PeriodicPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PeriodicPatternItemProvider periodicPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.PeriodicPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeriodicPatternAdapter() {
		if (periodicPatternItemProvider == null) {
			periodicPatternItemProvider = new PeriodicPatternItemProvider(this);
		}

		return periodicPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.AperiodicPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AperiodicPatternItemProvider aperiodicPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.AperiodicPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAperiodicPatternAdapter() {
		if (aperiodicPatternItemProvider == null) {
			aperiodicPatternItemProvider = new AperiodicPatternItemProvider(this);
		}

		return aperiodicPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.BurstPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BurstPatternItemProvider burstPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.BurstPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBurstPatternAdapter() {
		if (burstPatternItemProvider == null) {
			burstPatternItemProvider = new BurstPatternItemProvider(this);
		}

		return burstPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.IrregularPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IrregularPatternItemProvider irregularPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.IrregularPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIrregularPatternAdapter() {
		if (irregularPatternItemProvider == null) {
			irregularPatternItemProvider = new IrregularPatternItemProvider(this);
		}

		return irregularPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.ClosedPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClosedPatternItemProvider closedPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.ClosedPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClosedPatternAdapter() {
		if (closedPatternItemProvider == null) {
			closedPatternItemProvider = new ClosedPatternItemProvider(this);
		}

		return closedPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.SporadicPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SporadicPatternItemProvider sporadicPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.SporadicPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSporadicPatternAdapter() {
		if (sporadicPatternItemProvider == null) {
			sporadicPatternItemProvider = new SporadicPatternItemProvider(this);
		}

		return sporadicPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.OpenPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenPatternItemProvider openPatternItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.OpenPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenPatternAdapter() {
		if (openPatternItemProvider == null) {
			openPatternItemProvider = new OpenPatternItemProvider(this);
		}

		return openPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Percentage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_PercentageItemProvider nfP_PercentageItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Percentage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_PercentageAdapter() {
		if (nfP_PercentageItemProvider == null) {
			nfP_PercentageItemProvider = new NFP_PercentageItemProvider(this);
		}

		return nfP_PercentageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Price} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_PriceItemProvider nfP_PriceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Price}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_PriceAdapter() {
		if (nfP_PriceItemProvider == null) {
			nfP_PriceItemProvider = new NFP_PriceItemProvider(this);
		}

		return nfP_PriceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Weight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_WeightItemProvider nfP_WeightItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Weight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_WeightAdapter() {
		if (nfP_WeightItemProvider == null) {
			nfP_WeightItemProvider = new NFP_WeightItemProvider(this);
		}

		return nfP_WeightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE_Library.BasicNFP_Types.NFP_Duration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_DurationItemProvider nfP_DurationItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE_Library.BasicNFP_Types.NFP_Duration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_DurationAdapter() {
		if (nfP_DurationItemProvider == null) {
			nfP_DurationItemProvider = new NFP_DurationItemProvider(this);
		}

		return nfP_DurationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (nfP_CommonTypeItemProvider != null) nfP_CommonTypeItemProvider.dispose();
		if (nfP_FrequencyItemProvider != null) nfP_FrequencyItemProvider.dispose();
		if (nfP_RealItemProvider != null) nfP_RealItemProvider.dispose();
		if (nfP_NaturalItemProvider != null) nfP_NaturalItemProvider.dispose();
		if (nfP_BooleanItemProvider != null) nfP_BooleanItemProvider.dispose();
		if (nfP_StringItemProvider != null) nfP_StringItemProvider.dispose();
		if (nfP_IntegerItemProvider != null) nfP_IntegerItemProvider.dispose();
		if (nfP_DateTimeItemProvider != null) nfP_DateTimeItemProvider.dispose();
		if (nfP_DataTxRateItemProvider != null) nfP_DataTxRateItemProvider.dispose();
		if (nfP_PowerItemProvider != null) nfP_PowerItemProvider.dispose();
		if (nfP_DataSizeItemProvider != null) nfP_DataSizeItemProvider.dispose();
		if (nfP_EnergyItemProvider != null) nfP_EnergyItemProvider.dispose();
		if (nfP_LengthItemProvider != null) nfP_LengthItemProvider.dispose();
		if (nfP_AreaItemProvider != null) nfP_AreaItemProvider.dispose();
		if (arrivalPatternItemProvider != null) arrivalPatternItemProvider.dispose();
		if (periodicPatternItemProvider != null) periodicPatternItemProvider.dispose();
		if (aperiodicPatternItemProvider != null) aperiodicPatternItemProvider.dispose();
		if (burstPatternItemProvider != null) burstPatternItemProvider.dispose();
		if (irregularPatternItemProvider != null) irregularPatternItemProvider.dispose();
		if (closedPatternItemProvider != null) closedPatternItemProvider.dispose();
		if (sporadicPatternItemProvider != null) sporadicPatternItemProvider.dispose();
		if (openPatternItemProvider != null) openPatternItemProvider.dispose();
		if (nfP_PercentageItemProvider != null) nfP_PercentageItemProvider.dispose();
		if (nfP_PriceItemProvider != null) nfP_PriceItemProvider.dispose();
		if (nfP_WeightItemProvider != null) nfP_WeightItemProvider.dispose();
		if (nfP_DurationItemProvider != null) nfP_DurationItemProvider.dispose();
	}

}
