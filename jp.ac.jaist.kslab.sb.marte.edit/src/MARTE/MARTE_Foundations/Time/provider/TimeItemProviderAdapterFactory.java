/**
 */
package MARTE.MARTE_Foundations.Time.provider;

import MARTE.MARTE_Foundations.Time.util.TimeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TimeItemProviderAdapterFactory extends TimeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TimeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedDomainItemProvider timedDomainItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedDomainAdapter() {
		if (timedDomainItemProvider == null) {
			timedDomainItemProvider = new TimedDomainItemProvider(this);
		}

		return timedDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.Clock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockItemProvider clockItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.Clock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createClockAdapter() {
		if (clockItemProvider == null) {
			clockItemProvider = new ClockItemProvider(this);
		}

		return clockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.ClockType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockTypeItemProvider clockTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.ClockType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createClockTypeAdapter() {
		if (clockTypeItemProvider == null) {
			clockTypeItemProvider = new ClockTypeItemProvider(this);
		}

		return clockTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedValueSpecificationItemProvider timedValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedValueSpecificationAdapter() {
		if (timedValueSpecificationItemProvider == null) {
			timedValueSpecificationItemProvider = new TimedValueSpecificationItemProvider(this);
		}

		return timedValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedConstraintItemProvider timedConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedConstraintAdapter() {
		if (timedConstraintItemProvider == null) {
			timedConstraintItemProvider = new TimedConstraintItemProvider(this);
		}

		return timedConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.ClockConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockConstraintItemProvider clockConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.ClockConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createClockConstraintAdapter() {
		if (clockConstraintItemProvider == null) {
			clockConstraintItemProvider = new ClockConstraintItemProvider(this);
		}

		return clockConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedInstantObservation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedInstantObservationItemProvider timedInstantObservationItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedInstantObservation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedInstantObservationAdapter() {
		if (timedInstantObservationItemProvider == null) {
			timedInstantObservationItemProvider = new TimedInstantObservationItemProvider(this);
		}

		return timedInstantObservationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedDurationObservation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedDurationObservationItemProvider timedDurationObservationItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedDurationObservation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedDurationObservationAdapter() {
		if (timedDurationObservationItemProvider == null) {
			timedDurationObservationItemProvider = new TimedDurationObservationItemProvider(this);
		}

		return timedDurationObservationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedEventItemProvider timedEventItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedEventAdapter() {
		if (timedEventItemProvider == null) {
			timedEventItemProvider = new TimedEventItemProvider(this);
		}

		return timedEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.Time.TimedProcessing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedProcessingItemProvider timedProcessingItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.Time.TimedProcessing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimedProcessingAdapter() {
		if (timedProcessingItemProvider == null) {
			timedProcessingItemProvider = new TimedProcessingItemProvider(this);
		}

		return timedProcessingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (timedDomainItemProvider != null) timedDomainItemProvider.dispose();
		if (clockItemProvider != null) clockItemProvider.dispose();
		if (clockTypeItemProvider != null) clockTypeItemProvider.dispose();
		if (timedValueSpecificationItemProvider != null) timedValueSpecificationItemProvider.dispose();
		if (timedConstraintItemProvider != null) timedConstraintItemProvider.dispose();
		if (clockConstraintItemProvider != null) clockConstraintItemProvider.dispose();
		if (timedInstantObservationItemProvider != null) timedInstantObservationItemProvider.dispose();
		if (timedDurationObservationItemProvider != null) timedDurationObservationItemProvider.dispose();
		if (timedEventItemProvider != null) timedEventItemProvider.dispose();
		if (timedProcessingItemProvider != null) timedProcessingItemProvider.dispose();
	}

}
