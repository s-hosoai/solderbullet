/**
 */
package MARTE.MARTE_Foundations.GRM.provider;

import MARTE.MARTE_Foundations.GRM.util.GRMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GRMItemProviderAdapterFactory extends GRMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GRMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.StorageResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageResourceItemProvider storageResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.StorageResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStorageResourceAdapter() {
		if (storageResourceItemProvider == null) {
			storageResourceItemProvider = new StorageResourceItemProvider(this);
		}

		return storageResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.CommunicationEndPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationEndPointItemProvider communicationEndPointItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.CommunicationEndPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCommunicationEndPointAdapter() {
		if (communicationEndPointItemProvider == null) {
			communicationEndPointItemProvider = new CommunicationEndPointItemProvider(this);
		}

		return communicationEndPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.SynchronizationResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationResourceItemProvider synchronizationResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.SynchronizationResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSynchronizationResourceAdapter() {
		if (synchronizationResourceItemProvider == null) {
			synchronizationResourceItemProvider = new SynchronizationResourceItemProvider(this);
		}

		return synchronizationResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.ConcurrencyResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcurrencyResourceItemProvider concurrencyResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.ConcurrencyResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConcurrencyResourceAdapter() {
		if (concurrencyResourceItemProvider == null) {
			concurrencyResourceItemProvider = new ConcurrencyResourceItemProvider(this);
		}

		return concurrencyResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.Scheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulerItemProvider schedulerItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.Scheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSchedulerAdapter() {
		if (schedulerItemProvider == null) {
			schedulerItemProvider = new SchedulerItemProvider(this);
		}

		return schedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.ProcessingResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingResourceItemProvider processingResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.ProcessingResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProcessingResourceAdapter() {
		if (processingResourceItemProvider == null) {
			processingResourceItemProvider = new ProcessingResourceItemProvider(this);
		}

		return processingResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.ComputingResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingResourceItemProvider computingResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.ComputingResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createComputingResourceAdapter() {
		if (computingResourceItemProvider == null) {
			computingResourceItemProvider = new ComputingResourceItemProvider(this);
		}

		return computingResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.MutualExclusionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MutualExclusionResourceItemProvider mutualExclusionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.MutualExclusionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMutualExclusionResourceAdapter() {
		if (mutualExclusionResourceItemProvider == null) {
			mutualExclusionResourceItemProvider = new MutualExclusionResourceItemProvider(this);
		}

		return mutualExclusionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.SchedulableResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulableResourceItemProvider schedulableResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.SchedulableResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSchedulableResourceAdapter() {
		if (schedulableResourceItemProvider == null) {
			schedulableResourceItemProvider = new SchedulableResourceItemProvider(this);
		}

		return schedulableResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.SecondaryScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecondarySchedulerItemProvider secondarySchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.SecondaryScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSecondarySchedulerAdapter() {
		if (secondarySchedulerItemProvider == null) {
			secondarySchedulerItemProvider = new SecondarySchedulerItemProvider(this);
		}

		return secondarySchedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.CommunicationMedia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationMediaItemProvider communicationMediaItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.CommunicationMedia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCommunicationMediaAdapter() {
		if (communicationMediaItemProvider == null) {
			communicationMediaItemProvider = new CommunicationMediaItemProvider(this);
		}

		return communicationMediaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.DeviceResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceResourceItemProvider deviceResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.DeviceResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDeviceResourceAdapter() {
		if (deviceResourceItemProvider == null) {
			deviceResourceItemProvider = new DeviceResourceItemProvider(this);
		}

		return deviceResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.TimingResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingResourceItemProvider timingResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.TimingResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimingResourceAdapter() {
		if (timingResourceItemProvider == null) {
			timingResourceItemProvider = new TimingResourceItemProvider(this);
		}

		return timingResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.ClockResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockResourceItemProvider clockResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.ClockResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createClockResourceAdapter() {
		if (clockResourceItemProvider == null) {
			clockResourceItemProvider = new ClockResourceItemProvider(this);
		}

		return clockResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.TimerResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerResourceItemProvider timerResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.TimerResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTimerResourceAdapter() {
		if (timerResourceItemProvider == null) {
			timerResourceItemProvider = new TimerResourceItemProvider(this);
		}

		return timerResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.GrService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrServiceItemProvider grServiceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.GrService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGrServiceAdapter() {
		if (grServiceItemProvider == null) {
			grServiceItemProvider = new GrServiceItemProvider(this);
		}

		return grServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.Release} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseItemProvider releaseItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.Release}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createReleaseAdapter() {
		if (releaseItemProvider == null) {
			releaseItemProvider = new ReleaseItemProvider(this);
		}

		return releaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.Acquire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireItemProvider acquireItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.Acquire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAcquireAdapter() {
		if (acquireItemProvider == null) {
			acquireItemProvider = new AcquireItemProvider(this);
		}

		return acquireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_Foundations.GRM.ResourceUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceUsageItemProvider resourceUsageItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_Foundations.GRM.ResourceUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createResourceUsageAdapter() {
		if (resourceUsageItemProvider == null) {
			resourceUsageItemProvider = new ResourceUsageItemProvider(this);
		}

		return resourceUsageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (storageResourceItemProvider != null) storageResourceItemProvider.dispose();
		if (communicationEndPointItemProvider != null) communicationEndPointItemProvider.dispose();
		if (synchronizationResourceItemProvider != null) synchronizationResourceItemProvider.dispose();
		if (concurrencyResourceItemProvider != null) concurrencyResourceItemProvider.dispose();
		if (schedulerItemProvider != null) schedulerItemProvider.dispose();
		if (processingResourceItemProvider != null) processingResourceItemProvider.dispose();
		if (computingResourceItemProvider != null) computingResourceItemProvider.dispose();
		if (mutualExclusionResourceItemProvider != null) mutualExclusionResourceItemProvider.dispose();
		if (schedulableResourceItemProvider != null) schedulableResourceItemProvider.dispose();
		if (secondarySchedulerItemProvider != null) secondarySchedulerItemProvider.dispose();
		if (communicationMediaItemProvider != null) communicationMediaItemProvider.dispose();
		if (deviceResourceItemProvider != null) deviceResourceItemProvider.dispose();
		if (timingResourceItemProvider != null) timingResourceItemProvider.dispose();
		if (clockResourceItemProvider != null) clockResourceItemProvider.dispose();
		if (timerResourceItemProvider != null) timerResourceItemProvider.dispose();
		if (grServiceItemProvider != null) grServiceItemProvider.dispose();
		if (releaseItemProvider != null) releaseItemProvider.dispose();
		if (acquireItemProvider != null) acquireItemProvider.dispose();
		if (resourceUsageItemProvider != null) resourceUsageItemProvider.dispose();
	}

}
