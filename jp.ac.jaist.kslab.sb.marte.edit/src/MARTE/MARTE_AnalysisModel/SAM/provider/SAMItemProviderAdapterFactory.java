/**
 */
package MARTE.MARTE_AnalysisModel.SAM.provider;

import MARTE.MARTE_AnalysisModel.SAM.util.SAMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SAMItemProviderAdapterFactory extends SAMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SAMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaAnalysisContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaAnalysisContextItemProvider saAnalysisContextItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaAnalysisContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaAnalysisContextAdapter() {
		if (saAnalysisContextItemProvider == null) {
			saAnalysisContextItemProvider = new SaAnalysisContextItemProvider(this);
		}

		return saAnalysisContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaEndtoEndFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaEndtoEndFlowItemProvider saEndtoEndFlowItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaEndtoEndFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaEndtoEndFlowAdapter() {
		if (saEndtoEndFlowItemProvider == null) {
			saEndtoEndFlowItemProvider = new SaEndtoEndFlowItemProvider(this);
		}

		return saEndtoEndFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaCommStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaCommStepItemProvider saCommStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaCommStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaCommStepAdapter() {
		if (saCommStepItemProvider == null) {
			saCommStepItemProvider = new SaCommStepItemProvider(this);
		}

		return saCommStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaStepItemProvider saStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaStepAdapter() {
		if (saStepItemProvider == null) {
			saStepItemProvider = new SaStepItemProvider(this);
		}

		return saStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaSharedResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaSharedResourceItemProvider saSharedResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaSharedResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaSharedResourceAdapter() {
		if (saSharedResourceItemProvider == null) {
			saSharedResourceItemProvider = new SaSharedResourceItemProvider(this);
		}

		return saSharedResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaSchedObs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaSchedObsItemProvider saSchedObsItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaSchedObs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaSchedObsAdapter() {
		if (saSchedObsItemProvider == null) {
			saSchedObsItemProvider = new SaSchedObsItemProvider(this);
		}

		return saSchedObsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaCommHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaCommHostItemProvider saCommHostItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaCommHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaCommHostAdapter() {
		if (saCommHostItemProvider == null) {
			saCommHostItemProvider = new SaCommHostItemProvider(this);
		}

		return saCommHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.SAM.SaExecHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaExecHostItemProvider saExecHostItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.SAM.SaExecHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSaExecHostAdapter() {
		if (saExecHostItemProvider == null) {
			saExecHostItemProvider = new SaExecHostItemProvider(this);
		}

		return saExecHostItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (saAnalysisContextItemProvider != null) saAnalysisContextItemProvider.dispose();
		if (saEndtoEndFlowItemProvider != null) saEndtoEndFlowItemProvider.dispose();
		if (saCommStepItemProvider != null) saCommStepItemProvider.dispose();
		if (saStepItemProvider != null) saStepItemProvider.dispose();
		if (saSharedResourceItemProvider != null) saSharedResourceItemProvider.dispose();
		if (saSchedObsItemProvider != null) saSchedObsItemProvider.dispose();
		if (saCommHostItemProvider != null) saCommHostItemProvider.dispose();
		if (saExecHostItemProvider != null) saExecHostItemProvider.dispose();
	}

}
