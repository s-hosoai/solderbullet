/**
 */
package MARTE.MARTE_AnalysisModel.GQAM.provider;

import MARTE.MARTE_AnalysisModel.GQAM.util.GQAMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GQAMItemProviderAdapterFactory extends GQAMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GQAMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaWorkloadGeneratorItemProvider gaWorkloadGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaWorkloadGeneratorAdapter() {
		if (gaWorkloadGeneratorItemProvider == null) {
			gaWorkloadGeneratorItemProvider = new GaWorkloadGeneratorItemProvider(this);
		}

		return gaWorkloadGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaEventTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaEventTraceItemProvider gaEventTraceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaEventTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaEventTraceAdapter() {
		if (gaEventTraceItemProvider == null) {
			gaEventTraceItemProvider = new GaEventTraceItemProvider(this);
		}

		return gaEventTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaWorkloadEventItemProvider gaWorkloadEventItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaWorkloadEventAdapter() {
		if (gaWorkloadEventItemProvider == null) {
			gaWorkloadEventItemProvider = new GaWorkloadEventItemProvider(this);
		}

		return gaWorkloadEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaScenarioItemProvider gaScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaScenarioAdapter() {
		if (gaScenarioItemProvider == null) {
			gaScenarioItemProvider = new GaScenarioItemProvider(this);
		}

		return gaScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaStepItemProvider gaStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaStepAdapter() {
		if (gaStepItemProvider == null) {
			gaStepItemProvider = new GaStepItemProvider(this);
		}

		return gaStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaExecHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaExecHostItemProvider gaExecHostItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaExecHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaExecHostAdapter() {
		if (gaExecHostItemProvider == null) {
			gaExecHostItemProvider = new GaExecHostItemProvider(this);
		}

		return gaExecHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaRequestedService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaRequestedServiceItemProvider gaRequestedServiceItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaRequestedService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaRequestedServiceAdapter() {
		if (gaRequestedServiceItemProvider == null) {
			gaRequestedServiceItemProvider = new GaRequestedServiceItemProvider(this);
		}

		return gaRequestedServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaTimedObs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaTimedObsItemProvider gaTimedObsItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaTimedObs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaTimedObsAdapter() {
		if (gaTimedObsItemProvider == null) {
			gaTimedObsItemProvider = new GaTimedObsItemProvider(this);
		}

		return gaTimedObsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaCommStepItemProvider gaCommStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaCommStepAdapter() {
		if (gaCommStepItemProvider == null) {
			gaCommStepItemProvider = new GaCommStepItemProvider(this);
		}

		return gaCommStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaAcqStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaAcqStepItemProvider gaAcqStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaAcqStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaAcqStepAdapter() {
		if (gaAcqStepItemProvider == null) {
			gaAcqStepItemProvider = new GaAcqStepItemProvider(this);
		}

		return gaAcqStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaRelStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaRelStepItemProvider gaRelStepItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaRelStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaRelStepAdapter() {
		if (gaRelStepItemProvider == null) {
			gaRelStepItemProvider = new GaRelStepItemProvider(this);
		}

		return gaRelStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaLatencyObs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaLatencyObsItemProvider gaLatencyObsItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaLatencyObs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaLatencyObsAdapter() {
		if (gaLatencyObsItemProvider == null) {
			gaLatencyObsItemProvider = new GaLatencyObsItemProvider(this);
		}

		return gaLatencyObsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaCommHostItemProvider gaCommHostItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaCommHostAdapter() {
		if (gaCommHostItemProvider == null) {
			gaCommHostItemProvider = new GaCommHostItemProvider(this);
		}

		return gaCommHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaCommChannelItemProvider gaCommChannelItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaCommChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaCommChannelAdapter() {
		if (gaCommChannelItemProvider == null) {
			gaCommChannelItemProvider = new GaCommChannelItemProvider(this);
		}

		return gaCommChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaWorkloadBehaviorItemProvider gaWorkloadBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaWorkloadBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaWorkloadBehaviorAdapter() {
		if (gaWorkloadBehaviorItemProvider == null) {
			gaWorkloadBehaviorItemProvider = new GaWorkloadBehaviorItemProvider(this);
		}

		return gaWorkloadBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaAnalysisContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaAnalysisContextItemProvider gaAnalysisContextItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaAnalysisContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaAnalysisContextAdapter() {
		if (gaAnalysisContextItemProvider == null) {
			gaAnalysisContextItemProvider = new GaAnalysisContextItemProvider(this);
		}

		return gaAnalysisContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MARTE.MARTE_AnalysisModel.GQAM.GaResourcesPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaResourcesPlatformItemProvider gaResourcesPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link MARTE.MARTE_AnalysisModel.GQAM.GaResourcesPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGaResourcesPlatformAdapter() {
		if (gaResourcesPlatformItemProvider == null) {
			gaResourcesPlatformItemProvider = new GaResourcesPlatformItemProvider(this);
		}

		return gaResourcesPlatformItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gaWorkloadGeneratorItemProvider != null) gaWorkloadGeneratorItemProvider.dispose();
		if (gaEventTraceItemProvider != null) gaEventTraceItemProvider.dispose();
		if (gaWorkloadEventItemProvider != null) gaWorkloadEventItemProvider.dispose();
		if (gaScenarioItemProvider != null) gaScenarioItemProvider.dispose();
		if (gaStepItemProvider != null) gaStepItemProvider.dispose();
		if (gaExecHostItemProvider != null) gaExecHostItemProvider.dispose();
		if (gaRequestedServiceItemProvider != null) gaRequestedServiceItemProvider.dispose();
		if (gaTimedObsItemProvider != null) gaTimedObsItemProvider.dispose();
		if (gaCommStepItemProvider != null) gaCommStepItemProvider.dispose();
		if (gaAcqStepItemProvider != null) gaAcqStepItemProvider.dispose();
		if (gaRelStepItemProvider != null) gaRelStepItemProvider.dispose();
		if (gaLatencyObsItemProvider != null) gaLatencyObsItemProvider.dispose();
		if (gaCommHostItemProvider != null) gaCommHostItemProvider.dispose();
		if (gaCommChannelItemProvider != null) gaCommChannelItemProvider.dispose();
		if (gaWorkloadBehaviorItemProvider != null) gaWorkloadBehaviorItemProvider.dispose();
		if (gaAnalysisContextItemProvider != null) gaAnalysisContextItemProvider.dispose();
		if (gaResourcesPlatformItemProvider != null) gaResourcesPlatformItemProvider.dispose();
	}

}
