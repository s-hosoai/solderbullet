/*
* generated by Xtext
*/

package jp.ac.jaist.kslab.sb.marte.spec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpecDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatasheetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDslProtocolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	Datasheet | DslProtocol;
		public ParserRule getRule() { return rule; }

		//Datasheet | DslProtocol
		public Alternatives getAlternatives() { return cAlternatives; }

		//Datasheet
		public RuleCall getDatasheetParserRuleCall_0() { return cDatasheetParserRuleCall_0; }

		//DslProtocol
		public RuleCall getDslProtocolParserRuleCall_1() { return cDslProtocolParserRuleCall_1; }
	}

	public class DatasheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datasheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRevisionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRevisionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRevisionPackageNameParserRuleCall_0_1_0 = (RuleCall)cRevisionAssignment_0_1.eContents().get(0);
		private final Keyword cDatasheetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsDslComponentParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Datasheet:
		//	("revision" revision=PackageName)? "datasheet" name=ID "{" imports+=Import* components+=DslComponent* "}";
		public ParserRule getRule() { return rule; }

		//("revision" revision=PackageName)? "datasheet" name=ID "{" imports+=Import* components+=DslComponent* "}"
		public Group getGroup() { return cGroup; }

		//("revision" revision=PackageName)?
		public Group getGroup_0() { return cGroup_0; }

		//"revision"
		public Keyword getRevisionKeyword_0_0() { return cRevisionKeyword_0_0; }

		//revision=PackageName
		public Assignment getRevisionAssignment_0_1() { return cRevisionAssignment_0_1; }

		//PackageName
		public RuleCall getRevisionPackageNameParserRuleCall_0_1_0() { return cRevisionPackageNameParserRuleCall_0_1_0; }

		//"datasheet"
		public Keyword getDatasheetKeyword_1() { return cDatasheetKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//imports+=Import*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_0() { return cImportsImportParserRuleCall_4_0; }

		//components+=DslComponent*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//DslComponent
		public RuleCall getComponentsDslComponentParserRuleCall_5_0() { return cComponentsDslComponentParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class DslProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslProtocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationsDslOperationParserRuleCall_3_0 = (RuleCall)cOperationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DslProtocol:
		//	"protocol" name=QualifiedName "{" operations+=DslOperation* "}";
		public ParserRule getRule() { return rule; }

		//"protocol" name=QualifiedName "{" operations+=DslOperation* "}"
		public Group getGroup() { return cGroup; }

		//"protocol"
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//operations+=DslOperation*
		public Assignment getOperationsAssignment_3() { return cOperationsAssignment_3; }

		//DslOperation
		public RuleCall getOperationsDslOperationParserRuleCall_3_0() { return cOperationsDslOperationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DslOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDslTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamTypeDslTypeParserRuleCall_3_0_0 = (RuleCall)cParamTypeAssignment_3_0.eContents().get(0);
		private final Assignment cParamnameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamnameIDTerminalRuleCall_3_1_0 = (RuleCall)cParamnameAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamTypeAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamTypeDslTypeParserRuleCall_3_2_1_0 = (RuleCall)cParamTypeAssignment_3_2_1.eContents().get(0);
		private final Assignment cParamnameAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cParamnameIDTerminalRuleCall_3_2_2_0 = (RuleCall)cParamnameAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DslOperation:
		//	type=DslType? name=ID "(" (paramType+=DslType paramname+=ID ("," paramType+=DslType paramname+=ID)*)? ")";
		public ParserRule getRule() { return rule; }

		//type=DslType? name=ID "(" (paramType+=DslType paramname+=ID ("," paramType+=DslType paramname+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//type=DslType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DslType
		public RuleCall getTypeDslTypeParserRuleCall_0_0() { return cTypeDslTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(paramType+=DslType paramname+=ID ("," paramType+=DslType paramname+=ID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//paramType+=DslType
		public Assignment getParamTypeAssignment_3_0() { return cParamTypeAssignment_3_0; }

		//DslType
		public RuleCall getParamTypeDslTypeParserRuleCall_3_0_0() { return cParamTypeDslTypeParserRuleCall_3_0_0; }

		//paramname+=ID
		public Assignment getParamnameAssignment_3_1() { return cParamnameAssignment_3_1; }

		//ID
		public RuleCall getParamnameIDTerminalRuleCall_3_1_0() { return cParamnameIDTerminalRuleCall_3_1_0; }

		//("," paramType+=DslType paramname+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//paramType+=DslType
		public Assignment getParamTypeAssignment_3_2_1() { return cParamTypeAssignment_3_2_1; }

		//DslType
		public RuleCall getParamTypeDslTypeParserRuleCall_3_2_1_0() { return cParamTypeDslTypeParserRuleCall_3_2_1_0; }

		//paramname+=ID
		public Assignment getParamnameAssignment_3_2_2() { return cParamnameAssignment_3_2_2; }

		//ID
		public RuleCall getParamnameIDTerminalRuleCall_3_2_2_0() { return cParamnameIDTerminalRuleCall_3_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DslComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDslMcuParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDslDeviceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DslComponent:
		//	DslMcu | DslDevice;
		public ParserRule getRule() { return rule; }

		//DslMcu | DslDevice
		public Alternatives getAlternatives() { return cAlternatives; }

		//DslMcu
		public RuleCall getDslMcuParserRuleCall_0() { return cDslMcuParserRuleCall_0; }

		//DslDevice
		public RuleCall getDslDeviceParserRuleCall_1() { return cDslDeviceParserRuleCall_1; }
	}

	public class DslMcuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslMcu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMcuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinsDslPinParserRuleCall_4_0 = (RuleCall)cPinsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPinsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPinsDslPinParserRuleCall_5_1_0 = (RuleCall)cPinsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortsDslPortParserRuleCall_7_0 = (RuleCall)cPortsAssignment_7.eContents().get(0);
		private final Assignment cPeripheralsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPeripheralsDslPeripheralParserRuleCall_8_0 = (RuleCall)cPeripheralsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cSfrsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cSfrAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cSfrDslRegisterParserRuleCall_9_1_0 = (RuleCall)cSfrAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cSfrAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cSfrDslRegisterParserRuleCall_9_2_1_0 = (RuleCall)cSfrAssignment_9_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cPackagesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPackagesDslPackageParserRuleCall_10_0 = (RuleCall)cPackagesAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//DslMcu:
		//	"mcu" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* peripherals+=DslPeripheral* ("sfrs {"
		//	sfr+=DslRegister ("," sfr+=DslRegister)* "}")? packages+=DslPackage* "}";
		public ParserRule getRule() { return rule; }

		//"mcu" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* peripherals+=DslPeripheral* ("sfrs {"
		//sfr+=DslRegister ("," sfr+=DslRegister)* "}")? packages+=DslPackage* "}"
		public Group getGroup() { return cGroup; }

		//"mcu"
		public Keyword getMcuKeyword_0() { return cMcuKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"pins {"
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }

		//pins+=DslPin
		public Assignment getPinsAssignment_4() { return cPinsAssignment_4; }

		//DslPin
		public RuleCall getPinsDslPinParserRuleCall_4_0() { return cPinsDslPinParserRuleCall_4_0; }

		//("," pins+=DslPin)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//pins+=DslPin
		public Assignment getPinsAssignment_5_1() { return cPinsAssignment_5_1; }

		//DslPin
		public RuleCall getPinsDslPinParserRuleCall_5_1_0() { return cPinsDslPinParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//ports+=DslPort*
		public Assignment getPortsAssignment_7() { return cPortsAssignment_7; }

		//DslPort
		public RuleCall getPortsDslPortParserRuleCall_7_0() { return cPortsDslPortParserRuleCall_7_0; }

		//peripherals+=DslPeripheral*
		public Assignment getPeripheralsAssignment_8() { return cPeripheralsAssignment_8; }

		//DslPeripheral
		public RuleCall getPeripheralsDslPeripheralParserRuleCall_8_0() { return cPeripheralsDslPeripheralParserRuleCall_8_0; }

		//("sfrs {" sfr+=DslRegister ("," sfr+=DslRegister)* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"sfrs {"
		public Keyword getSfrsKeyword_9_0() { return cSfrsKeyword_9_0; }

		//sfr+=DslRegister
		public Assignment getSfrAssignment_9_1() { return cSfrAssignment_9_1; }

		//DslRegister
		public RuleCall getSfrDslRegisterParserRuleCall_9_1_0() { return cSfrDslRegisterParserRuleCall_9_1_0; }

		//("," sfr+=DslRegister)*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//","
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }

		//sfr+=DslRegister
		public Assignment getSfrAssignment_9_2_1() { return cSfrAssignment_9_2_1; }

		//DslRegister
		public RuleCall getSfrDslRegisterParserRuleCall_9_2_1_0() { return cSfrDslRegisterParserRuleCall_9_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }

		//packages+=DslPackage*
		public Assignment getPackagesAssignment_10() { return cPackagesAssignment_10; }

		//DslPackage
		public RuleCall getPackagesDslPackageParserRuleCall_10_0() { return cPackagesDslPackageParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class DslDeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslDevice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinsDslPinParserRuleCall_4_0 = (RuleCall)cPinsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPinsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPinsDslPinParserRuleCall_5_1_0 = (RuleCall)cPinsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortsDslPortParserRuleCall_7_0 = (RuleCall)cPortsAssignment_7.eContents().get(0);
		private final Assignment cFunctionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFunctionsDslFunctionParserRuleCall_8_0 = (RuleCall)cFunctionsAssignment_8.eContents().get(0);
		private final Assignment cPackagesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPackagesDslPackageParserRuleCall_9_0 = (RuleCall)cPackagesAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cRegistersKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cRegistersAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cRegistersDslRegisterParserRuleCall_10_2_0 = (RuleCall)cRegistersAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cRegistersAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cRegistersDslRegisterParserRuleCall_10_3_1_0 = (RuleCall)cRegistersAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//DslDevice:
		//	"device" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* functions+=DslFunction*
		//	packages+=DslPackage* ("registers" "{" registers+=DslRegister ("," registers+=DslRegister)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"device" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* functions+=DslFunction*
		//packages+=DslPackage* ("registers" "{" registers+=DslRegister ("," registers+=DslRegister)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"device"
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"pins {"
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }

		//pins+=DslPin
		public Assignment getPinsAssignment_4() { return cPinsAssignment_4; }

		//DslPin
		public RuleCall getPinsDslPinParserRuleCall_4_0() { return cPinsDslPinParserRuleCall_4_0; }

		//("," pins+=DslPin)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//pins+=DslPin
		public Assignment getPinsAssignment_5_1() { return cPinsAssignment_5_1; }

		//DslPin
		public RuleCall getPinsDslPinParserRuleCall_5_1_0() { return cPinsDslPinParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//ports+=DslPort*
		public Assignment getPortsAssignment_7() { return cPortsAssignment_7; }

		//DslPort
		public RuleCall getPortsDslPortParserRuleCall_7_0() { return cPortsDslPortParserRuleCall_7_0; }

		//functions+=DslFunction*
		public Assignment getFunctionsAssignment_8() { return cFunctionsAssignment_8; }

		//DslFunction
		public RuleCall getFunctionsDslFunctionParserRuleCall_8_0() { return cFunctionsDslFunctionParserRuleCall_8_0; }

		//packages+=DslPackage*
		public Assignment getPackagesAssignment_9() { return cPackagesAssignment_9; }

		//DslPackage
		public RuleCall getPackagesDslPackageParserRuleCall_9_0() { return cPackagesDslPackageParserRuleCall_9_0; }

		//("registers" "{" registers+=DslRegister ("," registers+=DslRegister)* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"registers"
		public Keyword getRegistersKeyword_10_0() { return cRegistersKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//registers+=DslRegister
		public Assignment getRegistersAssignment_10_2() { return cRegistersAssignment_10_2; }

		//DslRegister
		public RuleCall getRegistersDslRegisterParserRuleCall_10_2_0() { return cRegistersDslRegisterParserRuleCall_10_2_0; }

		//("," registers+=DslRegister)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//registers+=DslRegister
		public Assignment getRegistersAssignment_10_3_1() { return cRegistersAssignment_10_3_1; }

		//DslRegister
		public RuleCall getRegistersDslRegisterParserRuleCall_10_3_1_0() { return cRegistersDslRegisterParserRuleCall_10_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class DslPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPinsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cPinsDslPinCrossReference_2_1_0 = (CrossReference)cPinsAssignment_2_1.eContents().get(0);
		private final RuleCall cPinsDslPinIDTerminalRuleCall_2_1_0_1 = (RuleCall)cPinsDslPinCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPinsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cPinsDslPinCrossReference_2_2_1_0 = (CrossReference)cPinsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cPinsDslPinIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cPinsDslPinCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		/// * common * / DslPort:
		//	"port" name=ID ("{" pins+=[DslPin] ("," pins+=[DslPin])* "}")?;
		public ParserRule getRule() { return rule; }

		//"port" name=ID ("{" pins+=[DslPin] ("," pins+=[DslPin])* "}")?
		public Group getGroup() { return cGroup; }

		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" pins+=[DslPin] ("," pins+=[DslPin])* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//pins+=[DslPin]
		public Assignment getPinsAssignment_2_1() { return cPinsAssignment_2_1; }

		//[DslPin]
		public CrossReference getPinsDslPinCrossReference_2_1_0() { return cPinsDslPinCrossReference_2_1_0; }

		//ID
		public RuleCall getPinsDslPinIDTerminalRuleCall_2_1_0_1() { return cPinsDslPinIDTerminalRuleCall_2_1_0_1; }

		//("," pins+=[DslPin])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//pins+=[DslPin]
		public Assignment getPinsAssignment_2_2_1() { return cPinsAssignment_2_2_1; }

		//[DslPin]
		public CrossReference getPinsDslPinCrossReference_2_2_1_0() { return cPinsDslPinCrossReference_2_2_1_0; }

		//ID
		public RuleCall getPinsDslPinIDTerminalRuleCall_2_2_1_0_1() { return cPinsDslPinIDTerminalRuleCall_2_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class DslPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPin");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePinNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DslPin:
		//	name=PinName;
		public ParserRule getRule() { return rule; }

		//name=PinName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//PinName
		public RuleCall getNamePinNameParserRuleCall_0() { return cNamePinNameParserRuleCall_0; }
	}

	public class DslRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressHEXTerminalRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBitsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBitsDslBitParserRuleCall_3_1_0 = (RuleCall)cBitsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cBitsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cBitsDslBitParserRuleCall_3_2_1_0 = (RuleCall)cBitsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		/// * memory * / DslRegister:
		//	address=HEX ":" name=ID ("{" bits+=DslBit? ("," bits+=DslBit?)* "}")?;
		public ParserRule getRule() { return rule; }

		//address=HEX ":" name=ID ("{" bits+=DslBit? ("," bits+=DslBit?)* "}")?
		public Group getGroup() { return cGroup; }

		//address=HEX
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//HEX
		public RuleCall getAddressHEXTerminalRuleCall_0_0() { return cAddressHEXTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("{" bits+=DslBit? ("," bits+=DslBit?)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//bits+=DslBit?
		public Assignment getBitsAssignment_3_1() { return cBitsAssignment_3_1; }

		//DslBit
		public RuleCall getBitsDslBitParserRuleCall_3_1_0() { return cBitsDslBitParserRuleCall_3_1_0; }

		//("," bits+=DslBit?)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//bits+=DslBit?
		public Assignment getBitsAssignment_3_2_1() { return cBitsAssignment_3_2_1; }

		//DslBit
		public RuleCall getBitsDslBitParserRuleCall_3_2_1_0() { return cBitsDslBitParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class DslBitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslBit");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DslBit:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class DslPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinsDslPackagePinParserRuleCall_4_0 = (RuleCall)cPinsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPinsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPinsDslPackagePinParserRuleCall_5_1_0 = (RuleCall)cPinsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * Packages * / DslPackage:
		//	"package" names+=ID ("," names+=ID)* "{" pins+=DslPackagePin ("," pins+=DslPackagePin)* "}";
		public ParserRule getRule() { return rule; }

		//"package" names+=ID ("," names+=ID)* "{" pins+=DslPackagePin ("," pins+=DslPackagePin)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//names+=ID
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_0() { return cNamesIDTerminalRuleCall_1_0; }

		//("," names+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=ID
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_2_1_0() { return cNamesIDTerminalRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//pins+=DslPackagePin
		public Assignment getPinsAssignment_4() { return cPinsAssignment_4; }

		//DslPackagePin
		public RuleCall getPinsDslPackagePinParserRuleCall_4_0() { return cPinsDslPackagePinParserRuleCall_4_0; }

		//("," pins+=DslPackagePin)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//pins+=DslPackagePin
		public Assignment getPinsAssignment_5_1() { return cPinsAssignment_5_1; }

		//DslPackagePin
		public RuleCall getPinsDslPackagePinParserRuleCall_5_1_0() { return cPinsDslPackagePinParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DslPackagePinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPackagePin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePinNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPinNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPinNoPinNameParserRuleCall_2_0 = (RuleCall)cPinNoAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAltNamesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAltNamesPinNameParserRuleCall_4_1_0 = (RuleCall)cAltNamesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAltNamesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAltNamesPinNameParserRuleCall_4_2_1_0 = (RuleCall)cAltNamesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//DslPackagePin:
		//	name=PinName "(" pinNo=PinName ")" ("{" altNames+=PinName ("," altNames+=PinName)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=PinName "(" pinNo=PinName ")" ("{" altNames+=PinName ("," altNames+=PinName)* "}")?
		public Group getGroup() { return cGroup; }

		//name=PinName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//PinName
		public RuleCall getNamePinNameParserRuleCall_0_0() { return cNamePinNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//pinNo=PinName
		public Assignment getPinNoAssignment_2() { return cPinNoAssignment_2; }

		//PinName
		public RuleCall getPinNoPinNameParserRuleCall_2_0() { return cPinNoPinNameParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//("{" altNames+=PinName ("," altNames+=PinName)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//altNames+=PinName
		public Assignment getAltNamesAssignment_4_1() { return cAltNamesAssignment_4_1; }

		//PinName
		public RuleCall getAltNamesPinNameParserRuleCall_4_1_0() { return cAltNamesPinNameParserRuleCall_4_1_0; }

		//("," altNames+=PinName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//altNames+=PinName
		public Assignment getAltNamesAssignment_4_2_1() { return cAltNamesAssignment_4_2_1; }

		//PinName
		public RuleCall getAltNamesPinNameParserRuleCall_4_2_1_0() { return cAltNamesPinNameParserRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class DslPeripheralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPeripheral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeripheralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cImplementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCompliantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCompliantDslProtocolCrossReference_3_0 = (CrossReference)cCompliantAssignment_3.eContents().get(0);
		private final RuleCall cCompliantDslProtocolIDTerminalRuleCall_3_0_1 = (RuleCall)cCompliantDslProtocolCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsDslOperationImplParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * mcu specific * / DslPeripheral:
		//	"peripheral" name=ID "implements" compliant+=[DslProtocol] "{" operations+=DslOperationImpl* "}";
		public ParserRule getRule() { return rule; }

		//"peripheral" name=ID "implements" compliant+=[DslProtocol] "{" operations+=DslOperationImpl* "}"
		public Group getGroup() { return cGroup; }

		//"peripheral"
		public Keyword getPeripheralKeyword_0() { return cPeripheralKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_2() { return cImplementsKeyword_2; }

		//compliant+=[DslProtocol]
		public Assignment getCompliantAssignment_3() { return cCompliantAssignment_3; }

		//[DslProtocol]
		public CrossReference getCompliantDslProtocolCrossReference_3_0() { return cCompliantDslProtocolCrossReference_3_0; }

		//ID
		public RuleCall getCompliantDslProtocolIDTerminalRuleCall_3_0_1() { return cCompliantDslProtocolIDTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//operations+=DslOperationImpl*
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }

		//DslOperationImpl
		public RuleCall getOperationsDslOperationImplParserRuleCall_5_0() { return cOperationsDslOperationImplParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DslOperationImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslOperationImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRettypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRettypeDslTypeParserRuleCall_1_0 = (RuleCall)cRettypeAssignment_1.eContents().get(0);
		private final Assignment cImplOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cImplOperationDslOperationCrossReference_2_0 = (CrossReference)cImplOperationAssignment_2.eContents().get(0);
		private final RuleCall cImplOperationDslOperationIDTerminalRuleCall_2_0_1 = (RuleCall)cImplOperationDslOperationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsDslTypedParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsDslTypedParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionDslPeripheralExpressionParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DslOperationImpl:
		//	"impl" rettype=DslType? implOperation=[DslOperation] "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)?
		//	")" "{" expression+=DslPeripheralExpression* "}";
		public ParserRule getRule() { return rule; }

		//"impl" rettype=DslType? implOperation=[DslOperation] "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)?
		//")" "{" expression+=DslPeripheralExpression* "}"
		public Group getGroup() { return cGroup; }

		//"impl"
		public Keyword getImplKeyword_0() { return cImplKeyword_0; }

		//rettype=DslType?
		public Assignment getRettypeAssignment_1() { return cRettypeAssignment_1; }

		//DslType
		public RuleCall getRettypeDslTypeParserRuleCall_1_0() { return cRettypeDslTypeParserRuleCall_1_0; }

		//implOperation=[DslOperation]
		public Assignment getImplOperationAssignment_2() { return cImplOperationAssignment_2; }

		//[DslOperation]
		public CrossReference getImplOperationDslOperationCrossReference_2_0() { return cImplOperationDslOperationCrossReference_2_0; }

		//ID
		public RuleCall getImplOperationDslOperationIDTerminalRuleCall_2_0_1() { return cImplOperationDslOperationIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=DslTypedParameter ("," params+=DslTypedParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=DslTypedParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//DslTypedParameter
		public RuleCall getParamsDslTypedParameterParserRuleCall_4_0_0() { return cParamsDslTypedParameterParserRuleCall_4_0_0; }

		//("," params+=DslTypedParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=DslTypedParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//DslTypedParameter
		public RuleCall getParamsDslTypedParameterParserRuleCall_4_1_1_0() { return cParamsDslTypedParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//expression+=DslPeripheralExpression*
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }

		//DslPeripheralExpression
		public RuleCall getExpressionDslPeripheralExpressionParserRuleCall_7_0() { return cExpressionDslPeripheralExpressionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DslPeripheralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslPeripheralExpression");
		private final RuleCall cDslExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DslPeripheralExpression:
		//	DslExpression;
		public ParserRule getRule() { return rule; }

		//DslExpression
		public RuleCall getDslExpressionParserRuleCall() { return cDslExpressionParserRuleCall; }
	}

	public class DslRegisterReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslRegisterRead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefXBoolTypeParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarXBoolTypeParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//DslRegisterRead:
		//	ref=XBoolType "=>" var=XBoolType;
		public ParserRule getRule() { return rule; }

		//ref=XBoolType "=>" var=XBoolType
		public Group getGroup() { return cGroup; }

		//ref=XBoolType
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//XBoolType
		public RuleCall getRefXBoolTypeParserRuleCall_0_0() { return cRefXBoolTypeParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//var=XBoolType
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//XBoolType
		public RuleCall getVarXBoolTypeParserRuleCall_2_0() { return cVarXBoolTypeParserRuleCall_2_0; }
	}

	public class DslRegisterWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslRegisterWrite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefXBoolTypeParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDslValueParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		////	register=[DslRegister] "=>"(var=[DslVariable])?;
		//DslRegisterWrite:
		//	ref=XBoolType "<=" var=DslValue;
		public ParserRule getRule() { return rule; }

		//ref=XBoolType "<=" var=DslValue
		public Group getGroup() { return cGroup; }

		//ref=XBoolType
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//XBoolType
		public RuleCall getRefXBoolTypeParserRuleCall_0_0() { return cRefXBoolTypeParserRuleCall_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//var=DslValue
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//DslValue
		public RuleCall getVarDslValueParserRuleCall_2_0() { return cVarDslValueParserRuleCall_2_0; }
	}

	public class DslValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBINARYTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXBoolTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DslValue:
		//	HEX | BINARY | INT | XBoolType;
		public ParserRule getRule() { return rule; }

		//HEX | BINARY | INT | XBoolType
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//BINARY
		public RuleCall getBINARYTerminalRuleCall_1() { return cBINARYTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//XBoolType
		public RuleCall getXBoolTypeParserRuleCall_3() { return cXBoolTypeParserRuleCall_3; }
	}

	public class DslRefVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslRefVariable");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefDslVariableCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefDslVariableIDTerminalRuleCall_0_1 = (RuleCall)cRefDslVariableCrossReference_0.eContents().get(1);
		
		//DslRefVariable:
		//	ref=[DslVariable];
		public ParserRule getRule() { return rule; }

		//ref=[DslVariable]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[DslVariable]
		public CrossReference getRefDslVariableCrossReference_0() { return cRefDslVariableCrossReference_0; }

		//ID
		public RuleCall getRefDslVariableIDTerminalRuleCall_0_1() { return cRefDslVariableIDTerminalRuleCall_0_1; }
	}

	public class DslFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDslTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsDslTypedParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsDslTypedParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionsDslExpressionParserRuleCall_7_0 = (RuleCall)cExpressionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// * Device Specific * / DslFunction:
		//	"function" type=DslType? name=ID "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)? ")" "{"
		//	expressions+=DslExpression* "}";
		public ParserRule getRule() { return rule; }

		//"function" type=DslType? name=ID "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)? ")" "{"
		//expressions+=DslExpression* "}"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//type=DslType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DslType
		public RuleCall getTypeDslTypeParserRuleCall_1_0() { return cTypeDslTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=DslTypedParameter ("," params+=DslTypedParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=DslTypedParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//DslTypedParameter
		public RuleCall getParamsDslTypedParameterParserRuleCall_4_0_0() { return cParamsDslTypedParameterParserRuleCall_4_0_0; }

		//("," params+=DslTypedParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=DslTypedParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//DslTypedParameter
		public RuleCall getParamsDslTypedParameterParserRuleCall_4_1_1_0() { return cParamsDslTypedParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//expressions+=DslExpression*
		public Assignment getExpressionsAssignment_7() { return cExpressionsAssignment_7; }

		//DslExpression
		public RuleCall getExpressionsDslExpressionParserRuleCall_7_0() { return cExpressionsDslExpressionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DslTypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslTypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamTypeDslTypeParserRuleCall_0_0 = (RuleCall)cParamTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DslTypedParameter:
		//	paramType=DslType name=ID;
		public ParserRule getRule() { return rule; }

		//paramType=DslType name=ID
		public Group getGroup() { return cGroup; }

		//paramType=DslType
		public Assignment getParamTypeAssignment_0() { return cParamTypeAssignment_0; }

		//DslType
		public RuleCall getParamTypeDslTypeParserRuleCall_0_0() { return cParamTypeDslTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DslCallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslCallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariablesXBoolTypeParserRuleCall_0_0_0 = (RuleCall)cVariablesAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionDslOperationCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionDslOperationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFunctionDslOperationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsXConditionalExpressionParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsXConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////DslExpression:
		////	DslCallFunction | DslDefineVariable | DslReturn;
		//DslCallFunction:
		//	(variables=XBoolType "=")? function=[DslOperation|QualifiedName] "(" (params+=XConditionalExpression (","
		//	params+=XConditionalExpression)*)? ")";
		public ParserRule getRule() { return rule; }

		//(variables=XBoolType "=")? function=[DslOperation|QualifiedName] "(" (params+=XConditionalExpression (","
		//params+=XConditionalExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//(variables=XBoolType "=")?
		public Group getGroup_0() { return cGroup_0; }

		//variables=XBoolType
		public Assignment getVariablesAssignment_0_0() { return cVariablesAssignment_0_0; }

		//XBoolType
		public RuleCall getVariablesXBoolTypeParserRuleCall_0_0_0() { return cVariablesXBoolTypeParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//function=[DslOperation|QualifiedName]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[DslOperation|QualifiedName]
		public CrossReference getFunctionDslOperationCrossReference_1_0() { return cFunctionDslOperationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFunctionDslOperationQualifiedNameParserRuleCall_1_0_1() { return cFunctionDslOperationQualifiedNameParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=XConditionalExpression ("," params+=XConditionalExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=XConditionalExpression
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//XConditionalExpression
		public RuleCall getParamsXConditionalExpressionParserRuleCall_3_0_0() { return cParamsXConditionalExpressionParserRuleCall_3_0_0; }

		//("," params+=XConditionalExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=XConditionalExpression
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//XConditionalExpression
		public RuleCall getParamsXConditionalExpressionParserRuleCall_3_1_1_0() { return cParamsXConditionalExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DslDefineVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslDefineVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValXBoolTypeParserRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//DslDefineVariable:
		//	"var" name=ID ("=" val=XBoolType)?;
		public ParserRule getRule() { return rule; }

		//"var" name=ID ("=" val=XBoolType)?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" val=XBoolType)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//val=XBoolType
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }

		//XBoolType
		public RuleCall getValXBoolTypeParserRuleCall_2_1_0() { return cValXBoolTypeParserRuleCall_2_1_0; }
	}

	public class DslReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValXBoolTypeParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//DslReturn:
		//	"return" val=XBoolType;
		public ParserRule getRule() { return rule; }

		//"return" val=XBoolType
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//val=XBoolType
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//XBoolType
		public RuleCall getValXBoolTypeParserRuleCall_1_0() { return cValXBoolTypeParserRuleCall_1_0; }
	}

	public class DslTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeDslCTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//DslType:
		//	type=DslCType;
		public ParserRule getRule() { return rule; }

		//type=DslCType
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//DslCType
		public RuleCall getTypeDslCTypeParserRuleCall_0() { return cTypeDslCTypeParserRuleCall_0; }
	}

	public class DslVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslVariable");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarDslDefineVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarDslDefineVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarDslDefineVariableCrossReference_0.eContents().get(1);
		
		//DslVariable:
		//	var=[DslDefineVariable];
		public ParserRule getRule() { return rule; }

		//var=[DslDefineVariable]
		public Assignment getVarAssignment() { return cVarAssignment; }

		//[DslDefineVariable]
		public CrossReference getVarDslDefineVariableCrossReference_0() { return cVarDslDefineVariableCrossReference_0; }

		//ID
		public RuleCall getVarDslDefineVariableIDTerminalRuleCall_0_1() { return cVarDslDefineVariableIDTerminalRuleCall_0_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * basics * / Name:
		//	STRING | INT | ID;
		public ParserRule getRule() { return rule; }

		//STRING | INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class PinNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PinName");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PinName:
		//	Name;
		public ParserRule getRule() { return rule; }

		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}

	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackageName:
		//	("this" | ID) ("/" ID)*;
		public ParserRule getRule() { return rule; }

		//("this" | ID) ("/" ID)*
		public Group getGroup() { return cGroup; }

		//"this" | ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"this"
		public Keyword getThisKeyword_0_0() { return cThisKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//("/" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DslCTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslCType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cByteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cStringKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVoidKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBoolKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//DslCType:
		//	"int" | "char" | "byte" | "long" | "float" | "double" | "string" | "void" | "bool";
		public ParserRule getRule() { return rule; }

		//"int" | "char" | "byte" | "long" | "float" | "double" | "string" | "void" | "bool"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"char"
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }

		//"byte"
		public Keyword getByteKeyword_2() { return cByteKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }

		//"string"
		public Keyword getStringKeyword_6() { return cStringKeyword_6; }

		//"void"
		public Keyword getVoidKeyword_7() { return cVoidKeyword_7; }

		//"bool"
		public Keyword getBoolKeyword_8() { return cBoolKeyword_8; }
	}

	public class DslExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBinaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBlockExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDslCallFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDslDefineVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDslReturnParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDslRegisterReadParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDslRegisterWriteParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//DslExpression:
		//	XPrimaryExpression | XBinaryExpression | XBlockExpression | DslCallFunction | DslDefineVariable | DslReturn |
		//	DslRegisterRead | DslRegisterWrite;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression | XBinaryExpression | XBlockExpression | DslCallFunction | DslDefineVariable | DslReturn |
		//DslRegisterRead | DslRegisterWrite
		public Alternatives getAlternatives() { return cAlternatives; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//XBinaryExpression
		public RuleCall getXBinaryExpressionParserRuleCall_1() { return cXBinaryExpressionParserRuleCall_1; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_2() { return cXBlockExpressionParserRuleCall_2; }

		//DslCallFunction
		public RuleCall getDslCallFunctionParserRuleCall_3() { return cDslCallFunctionParserRuleCall_3; }

		//DslDefineVariable
		public RuleCall getDslDefineVariableParserRuleCall_4() { return cDslDefineVariableParserRuleCall_4; }

		//DslReturn
		public RuleCall getDslReturnParserRuleCall_5() { return cDslReturnParserRuleCall_5; }

		//DslRegisterRead
		public RuleCall getDslRegisterReadParserRuleCall_6() { return cDslRegisterReadParserRuleCall_6; }

		//DslRegisterWrite
		public RuleCall getDslRegisterWriteParserRuleCall_7() { return cDslRegisterWriteParserRuleCall_7; }
	}

	public class XBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDslVariableParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpXBinaryOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightDslExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//XBinaryExpression:
		//	left=DslVariable op=XBinaryOperator right=DslExpression;
		public ParserRule getRule() { return rule; }

		//left=DslVariable op=XBinaryOperator right=DslExpression
		public Group getGroup() { return cGroup; }

		//left=DslVariable
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//DslVariable
		public RuleCall getLeftDslVariableParserRuleCall_0_0() { return cLeftDslVariableParserRuleCall_0_0; }

		//op=XBinaryOperator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//XBinaryOperator
		public RuleCall getOpXBinaryOperatorParserRuleCall_1_0() { return cOpXBinaryOperatorParserRuleCall_1_0; }

		//right=DslExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//DslExpression
		public RuleCall getRightDslExpressionParserRuleCall_2_0() { return cRightDslExpressionParserRuleCall_2_0; }
	}

	public class XBinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignLessThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSolidusKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAmpersandKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVerticalLineKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//XBinaryOperator:
		//	"+" | "-" | "==" | "!=" | "<" | ">" | "<<" | ">>" | "*" | "/" | "&" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "==" | "!=" | "<" | ">" | "<<" | ">>" | "*" | "/" | "&" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_6() { return cLessThanSignLessThanSignKeyword_6; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_7() { return cGreaterThanSignGreaterThanSignKeyword_7; }

		//"*"
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }

		//"/"
		public Keyword getSolidusKeyword_9() { return cSolidusKeyword_9; }

		//"&"
		public Keyword getAmpersandKeyword_10() { return cAmpersandKeyword_10; }

		//"|"
		public Keyword getVerticalLineKeyword_11() { return cVerticalLineKeyword_11; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionDslExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XBlockExpression:
		//	"(" expression=DslExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=DslExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=DslExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//DslExpression
		public RuleCall getExpressionDslExpressionParserRuleCall_1_0() { return cExpressionDslExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXWhileExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXForExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXDoWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XPrimaryExpression:
		//	XIfExpression | XWhileExpression | XForExpression | XDoWhileExpression;
		public ParserRule getRule() { return rule; }

		//XIfExpression | XWhileExpression | XForExpression | XDoWhileExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_0() { return cXIfExpressionParserRuleCall_0; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_1() { return cXWhileExpressionParserRuleCall_1; }

		//XForExpression
		public RuleCall getXForExpressionParserRuleCall_2() { return cXForExpressionParserRuleCall_2; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_3() { return cXDoWhileExpressionParserRuleCall_3; }
	}

	public class XConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConditionalUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXConditionalBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBoolExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXBoolTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XConditionalExpression:
		//	XConditionalUnaryExpression | XConditionalBlockExpression | XBoolExpression | XBoolType | XLiteral;
		public ParserRule getRule() { return rule; }

		//XConditionalUnaryExpression | XConditionalBlockExpression | XBoolExpression | XBoolType | XLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConditionalUnaryExpression
		public RuleCall getXConditionalUnaryExpressionParserRuleCall_0() { return cXConditionalUnaryExpressionParserRuleCall_0; }

		//XConditionalBlockExpression
		public RuleCall getXConditionalBlockExpressionParserRuleCall_1() { return cXConditionalBlockExpressionParserRuleCall_1; }

		//XBoolExpression
		public RuleCall getXBoolExpressionParserRuleCall_2() { return cXBoolExpressionParserRuleCall_2; }

		//XBoolType
		public RuleCall getXBoolTypeParserRuleCall_3() { return cXBoolTypeParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }
	}

	public class XConditionalBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConditionalBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXConditionalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XConditionalBlockExpression:
		//	"(" expression=XConditionalExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=XConditionalExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=XConditionalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XConditionalExpression
		public RuleCall getExpressionXConditionalExpressionParserRuleCall_1_0() { return cExpressionXConditionalExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XConditionalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConditionalUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXConditionalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XConditionalUnaryExpression:
		//	"!" expression=XConditionalExpression;
		public ParserRule getRule() { return rule; }

		//"!" expression=XConditionalExpression
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//expression=XConditionalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XConditionalExpression
		public RuleCall getExpressionXConditionalExpressionParserRuleCall_1_0() { return cExpressionXConditionalExpressionParserRuleCall_1_0; }
	}

	public class XBoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBoolExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftXBoolTypeParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpXBoolOperationParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightXConditionalExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//XBoolExpression:
		//	left=XBoolType op=XBoolOperation right=XConditionalExpression;
		public ParserRule getRule() { return rule; }

		//left=XBoolType op=XBoolOperation right=XConditionalExpression
		public Group getGroup() { return cGroup; }

		//left=XBoolType
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//XBoolType
		public RuleCall getLeftXBoolTypeParserRuleCall_0_0() { return cLeftXBoolTypeParserRuleCall_0_0; }

		//op=XBoolOperation
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//XBoolOperation
		public RuleCall getOpXBoolOperationParserRuleCall_1_0() { return cOpXBoolOperationParserRuleCall_1_0; }

		//right=XConditionalExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//XConditionalExpression
		public RuleCall getRightXConditionalExpressionParserRuleCall_2_0() { return cRightXConditionalExpressionParserRuleCall_2_0; }
	}

	public class XBoolOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBoolOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAmpersandKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cVerticalLineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//XBoolOperation:
		//	"||" | "&&" | "==" | "!=" | ">" | "<" | ">=" | "<=" | "&" | "|";
		public ParserRule getRule() { return rule; }

		//"||" | "&&" | "==" | "!=" | ">" | "<" | ">=" | "<=" | "&" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//"&"
		public Keyword getAmpersandKeyword_8() { return cAmpersandKeyword_8; }

		//"|"
		public Keyword getVerticalLineKeyword_9() { return cVerticalLineKeyword_9; }
	}

	public class XBoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBoolType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBitAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXRegisterAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXVariableAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXParamVariableAccessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XBoolType:
		//	XBitAccess | XRegisterAccess | XVariableAccess | XParamVariableAccess;
		public ParserRule getRule() { return rule; }

		//XBitAccess | XRegisterAccess | XVariableAccess | XParamVariableAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBitAccess
		public RuleCall getXBitAccessParserRuleCall_0() { return cXBitAccessParserRuleCall_0; }

		//XRegisterAccess
		public RuleCall getXRegisterAccessParserRuleCall_1() { return cXRegisterAccessParserRuleCall_1; }

		//XVariableAccess
		public RuleCall getXVariableAccessParserRuleCall_2() { return cXVariableAccessParserRuleCall_2; }

		//XParamVariableAccess
		public RuleCall getXParamVariableAccessParserRuleCall_3() { return cXParamVariableAccessParserRuleCall_3; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBINARYTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XLiteral:
		//	BINARY | HEX | INT;
		public ParserRule getRule() { return rule; }

		//BINARY | HEX | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//BINARY
		public RuleCall getBINARYTerminalRuleCall_0() { return cBINARYTerminalRuleCall_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1() { return cHEXTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class XBitAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBitAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBitDslBitCrossReference_1_0 = (CrossReference)cBitAssignment_1.eContents().get(0);
		private final RuleCall cBitDslBitQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cBitDslBitCrossReference_1_0.eContents().get(1);
		
		//XBitAccess:
		//	"#" bit=[DslBit|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"#" bit=[DslBit|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//bit=[DslBit|QualifiedName]
		public Assignment getBitAssignment_1() { return cBitAssignment_1; }

		//[DslBit|QualifiedName]
		public CrossReference getBitDslBitCrossReference_1_0() { return cBitDslBitCrossReference_1_0; }

		//QualifiedName
		public RuleCall getBitDslBitQualifiedNameParserRuleCall_1_0_1() { return cBitDslBitQualifiedNameParserRuleCall_1_0_1; }
	}

	public class XRegisterAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRegisterAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRegDslRegisterCrossReference_1_0 = (CrossReference)cRegAssignment_1.eContents().get(0);
		private final RuleCall cRegDslRegisterIDTerminalRuleCall_1_0_1 = (RuleCall)cRegDslRegisterCrossReference_1_0.eContents().get(1);
		
		//XRegisterAccess:
		//	"$" reg=[DslRegister];
		public ParserRule getRule() { return rule; }

		//"$" reg=[DslRegister]
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//reg=[DslRegister]
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//[DslRegister]
		public CrossReference getRegDslRegisterCrossReference_1_0() { return cRegDslRegisterCrossReference_1_0; }

		//ID
		public RuleCall getRegDslRegisterIDTerminalRuleCall_1_0_1() { return cRegDslRegisterIDTerminalRuleCall_1_0_1; }
	}

	public class XVariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableAccess");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarDslDefineVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarDslDefineVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarDslDefineVariableCrossReference_0.eContents().get(1);
		
		//XVariableAccess:
		//	var=[DslDefineVariable];
		public ParserRule getRule() { return rule; }

		//var=[DslDefineVariable]
		public Assignment getVarAssignment() { return cVarAssignment; }

		//[DslDefineVariable]
		public CrossReference getVarDslDefineVariableCrossReference_0() { return cVarDslDefineVariableCrossReference_0; }

		//ID
		public RuleCall getVarDslDefineVariableIDTerminalRuleCall_0_1() { return cVarDslDefineVariableIDTerminalRuleCall_0_1; }
	}

	public class XParamVariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParamVariableAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarDslTypedParameterCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarDslTypedParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cVarDslTypedParameterCrossReference_1_0.eContents().get(1);
		
		//XParamVariableAccess:
		//	"~" var=[DslTypedParameter];
		public ParserRule getRule() { return rule; }

		//"~" var=[DslTypedParameter]
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//var=[DslTypedParameter]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//[DslTypedParameter]
		public CrossReference getVarDslTypedParameterCrossReference_1_0() { return cVarDslTypedParameterCrossReference_1_0; }

		//ID
		public RuleCall getVarDslTypedParameterIDTerminalRuleCall_1_0_1() { return cVarDslTypedParameterIDTerminalRuleCall_1_0_1; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfXConditionalExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenDslExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseDslExpressionParserRuleCall_7_2_0 = (RuleCall)cElseAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//XIfExpression:
		//	"if" "(" if=XConditionalExpression ")" "{" then=DslExpression "}" ("else" "{" else=DslExpression "}")?;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=XConditionalExpression ")" "{" then=DslExpression "}" ("else" "{" else=DslExpression "}")?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=XConditionalExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//XConditionalExpression
		public RuleCall getIfXConditionalExpressionParserRuleCall_2_0() { return cIfXConditionalExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//then=DslExpression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//DslExpression
		public RuleCall getThenDslExpressionParserRuleCall_5_0() { return cThenDslExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("else" "{" else=DslExpression "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//else=DslExpression
		public Assignment getElseAssignment_7_2() { return cElseAssignment_7_2; }

		//DslExpression
		public RuleCall getElseDslExpressionParserRuleCall_7_2_0() { return cElseDslExpressionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXConditionalExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyDslExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XWhileExpression:
		//	"while" "(" predicate=XConditionalExpression ")" "{" body=DslExpression? "}";
		public ParserRule getRule() { return rule; }

		//"while" "(" predicate=XConditionalExpression ")" "{" body=DslExpression? "}"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//predicate=XConditionalExpression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//XConditionalExpression
		public RuleCall getPredicateXConditionalExpressionParserRuleCall_2_0() { return cPredicateXConditionalExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//body=DslExpression?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//DslExpression
		public RuleCall getBodyDslExpressionParserRuleCall_5_0() { return cBodyDslExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XForExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitDslExpressionParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateXConditionalExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopDslExpressionParserRuleCall_6_0 = (RuleCall)cLoopAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyDslExpressionParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XForExpression:
		//	"for" "(" init=DslExpression ";" predicate=XConditionalExpression ";" loop=DslExpression ")" "{" body=DslExpression?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"for" "(" init=DslExpression ";" predicate=XConditionalExpression ";" loop=DslExpression ")" "{" body=DslExpression? "}"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//init=DslExpression
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }

		//DslExpression
		public RuleCall getInitDslExpressionParserRuleCall_2_0() { return cInitDslExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//predicate=XConditionalExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//XConditionalExpression
		public RuleCall getPredicateXConditionalExpressionParserRuleCall_4_0() { return cPredicateXConditionalExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//loop=DslExpression
		public Assignment getLoopAssignment_6() { return cLoopAssignment_6; }

		//DslExpression
		public RuleCall getLoopDslExpressionParserRuleCall_6_0() { return cLoopDslExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//body=DslExpression?
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }

		//DslExpression
		public RuleCall getBodyDslExpressionParserRuleCall_9_0() { return cBodyDslExpressionParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyDslExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredicateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredicateXConditionalExpressionParserRuleCall_6_0 = (RuleCall)cPredicateAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XDoWhileExpression:
		//	"do" "{" body=DslExpression "}" "while" "(" predicate=XConditionalExpression ")";
		public ParserRule getRule() { return rule; }

		//"do" "{" body=DslExpression "}" "while" "(" predicate=XConditionalExpression ")"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//body=DslExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//DslExpression
		public RuleCall getBodyDslExpressionParserRuleCall_2_0() { return cBodyDslExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"while"
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//predicate=XConditionalExpression
		public Assignment getPredicateAssignment_6() { return cPredicateAssignment_6; }

		//XConditionalExpression
		public RuleCall getPredicateXConditionalExpressionParserRuleCall_6_0() { return cPredicateXConditionalExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private ModelElements pModel;
	private DatasheetElements pDatasheet;
	private ImportElements pImport;
	private DslProtocolElements pDslProtocol;
	private DslOperationElements pDslOperation;
	private DslComponentElements pDslComponent;
	private DslMcuElements pDslMcu;
	private DslDeviceElements pDslDevice;
	private DslPortElements pDslPort;
	private DslPinElements pDslPin;
	private DslRegisterElements pDslRegister;
	private DslBitElements pDslBit;
	private DslPackageElements pDslPackage;
	private DslPackagePinElements pDslPackagePin;
	private DslPeripheralElements pDslPeripheral;
	private DslOperationImplElements pDslOperationImpl;
	private DslPeripheralExpressionElements pDslPeripheralExpression;
	private DslRegisterReadElements pDslRegisterRead;
	private DslRegisterWriteElements pDslRegisterWrite;
	private DslValueElements pDslValue;
	private DslRefVariableElements pDslRefVariable;
	private DslFunctionElements pDslFunction;
	private DslTypedParameterElements pDslTypedParameter;
	private DslCallFunctionElements pDslCallFunction;
	private DslDefineVariableElements pDslDefineVariable;
	private DslReturnElements pDslReturn;
	private DslTypeElements pDslType;
	private DslVariableElements pDslVariable;
	private NameElements pName;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private PinNameElements pPinName;
	private PackageNameElements pPackageName;
	private DslCTypeElements pDslCType;
	private TerminalRule tHEX;
	private TerminalRule tBINARY;
	private DslExpressionElements pDslExpression;
	private XBinaryExpressionElements pXBinaryExpression;
	private XBinaryOperatorElements pXBinaryOperator;
	private XBlockExpressionElements pXBlockExpression;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XConditionalExpressionElements pXConditionalExpression;
	private XConditionalBlockExpressionElements pXConditionalBlockExpression;
	private XConditionalUnaryExpressionElements pXConditionalUnaryExpression;
	private XBoolExpressionElements pXBoolExpression;
	private XBoolOperationElements pXBoolOperation;
	private XBoolTypeElements pXBoolType;
	private XLiteralElements pXLiteral;
	private XBitAccessElements pXBitAccess;
	private XRegisterAccessElements pXRegisterAccess;
	private XVariableAccessElements pXVariableAccess;
	private XParamVariableAccessElements pXParamVariableAccess;
	private XIfExpressionElements pXIfExpression;
	private XWhileExpressionElements pXWhileExpression;
	private XForExpressionElements pXForExpression;
	private XDoWhileExpressionElements pXDoWhileExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpecDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Datasheet | DslProtocol;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Datasheet:
	//	("revision" revision=PackageName)? "datasheet" name=ID "{" imports+=Import* components+=DslComponent* "}";
	public DatasheetElements getDatasheetAccess() {
		return (pDatasheet != null) ? pDatasheet : (pDatasheet = new DatasheetElements());
	}
	
	public ParserRule getDatasheetRule() {
		return getDatasheetAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//DslProtocol:
	//	"protocol" name=QualifiedName "{" operations+=DslOperation* "}";
	public DslProtocolElements getDslProtocolAccess() {
		return (pDslProtocol != null) ? pDslProtocol : (pDslProtocol = new DslProtocolElements());
	}
	
	public ParserRule getDslProtocolRule() {
		return getDslProtocolAccess().getRule();
	}

	//DslOperation:
	//	type=DslType? name=ID "(" (paramType+=DslType paramname+=ID ("," paramType+=DslType paramname+=ID)*)? ")";
	public DslOperationElements getDslOperationAccess() {
		return (pDslOperation != null) ? pDslOperation : (pDslOperation = new DslOperationElements());
	}
	
	public ParserRule getDslOperationRule() {
		return getDslOperationAccess().getRule();
	}

	//DslComponent:
	//	DslMcu | DslDevice;
	public DslComponentElements getDslComponentAccess() {
		return (pDslComponent != null) ? pDslComponent : (pDslComponent = new DslComponentElements());
	}
	
	public ParserRule getDslComponentRule() {
		return getDslComponentAccess().getRule();
	}

	//DslMcu:
	//	"mcu" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* peripherals+=DslPeripheral* ("sfrs {"
	//	sfr+=DslRegister ("," sfr+=DslRegister)* "}")? packages+=DslPackage* "}";
	public DslMcuElements getDslMcuAccess() {
		return (pDslMcu != null) ? pDslMcu : (pDslMcu = new DslMcuElements());
	}
	
	public ParserRule getDslMcuRule() {
		return getDslMcuAccess().getRule();
	}

	//DslDevice:
	//	"device" name=ID "{" "pins {" pins+=DslPin ("," pins+=DslPin)* "}" ports+=DslPort* functions+=DslFunction*
	//	packages+=DslPackage* ("registers" "{" registers+=DslRegister ("," registers+=DslRegister)* "}")? "}";
	public DslDeviceElements getDslDeviceAccess() {
		return (pDslDevice != null) ? pDslDevice : (pDslDevice = new DslDeviceElements());
	}
	
	public ParserRule getDslDeviceRule() {
		return getDslDeviceAccess().getRule();
	}

	/// * common * / DslPort:
	//	"port" name=ID ("{" pins+=[DslPin] ("," pins+=[DslPin])* "}")?;
	public DslPortElements getDslPortAccess() {
		return (pDslPort != null) ? pDslPort : (pDslPort = new DslPortElements());
	}
	
	public ParserRule getDslPortRule() {
		return getDslPortAccess().getRule();
	}

	//DslPin:
	//	name=PinName;
	public DslPinElements getDslPinAccess() {
		return (pDslPin != null) ? pDslPin : (pDslPin = new DslPinElements());
	}
	
	public ParserRule getDslPinRule() {
		return getDslPinAccess().getRule();
	}

	/// * memory * / DslRegister:
	//	address=HEX ":" name=ID ("{" bits+=DslBit? ("," bits+=DslBit?)* "}")?;
	public DslRegisterElements getDslRegisterAccess() {
		return (pDslRegister != null) ? pDslRegister : (pDslRegister = new DslRegisterElements());
	}
	
	public ParserRule getDslRegisterRule() {
		return getDslRegisterAccess().getRule();
	}

	//DslBit:
	//	name=ID;
	public DslBitElements getDslBitAccess() {
		return (pDslBit != null) ? pDslBit : (pDslBit = new DslBitElements());
	}
	
	public ParserRule getDslBitRule() {
		return getDslBitAccess().getRule();
	}

	/// * Packages * / DslPackage:
	//	"package" names+=ID ("," names+=ID)* "{" pins+=DslPackagePin ("," pins+=DslPackagePin)* "}";
	public DslPackageElements getDslPackageAccess() {
		return (pDslPackage != null) ? pDslPackage : (pDslPackage = new DslPackageElements());
	}
	
	public ParserRule getDslPackageRule() {
		return getDslPackageAccess().getRule();
	}

	//DslPackagePin:
	//	name=PinName "(" pinNo=PinName ")" ("{" altNames+=PinName ("," altNames+=PinName)* "}")?;
	public DslPackagePinElements getDslPackagePinAccess() {
		return (pDslPackagePin != null) ? pDslPackagePin : (pDslPackagePin = new DslPackagePinElements());
	}
	
	public ParserRule getDslPackagePinRule() {
		return getDslPackagePinAccess().getRule();
	}

	/// * mcu specific * / DslPeripheral:
	//	"peripheral" name=ID "implements" compliant+=[DslProtocol] "{" operations+=DslOperationImpl* "}";
	public DslPeripheralElements getDslPeripheralAccess() {
		return (pDslPeripheral != null) ? pDslPeripheral : (pDslPeripheral = new DslPeripheralElements());
	}
	
	public ParserRule getDslPeripheralRule() {
		return getDslPeripheralAccess().getRule();
	}

	//DslOperationImpl:
	//	"impl" rettype=DslType? implOperation=[DslOperation] "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)?
	//	")" "{" expression+=DslPeripheralExpression* "}";
	public DslOperationImplElements getDslOperationImplAccess() {
		return (pDslOperationImpl != null) ? pDslOperationImpl : (pDslOperationImpl = new DslOperationImplElements());
	}
	
	public ParserRule getDslOperationImplRule() {
		return getDslOperationImplAccess().getRule();
	}

	//DslPeripheralExpression:
	//	DslExpression;
	public DslPeripheralExpressionElements getDslPeripheralExpressionAccess() {
		return (pDslPeripheralExpression != null) ? pDslPeripheralExpression : (pDslPeripheralExpression = new DslPeripheralExpressionElements());
	}
	
	public ParserRule getDslPeripheralExpressionRule() {
		return getDslPeripheralExpressionAccess().getRule();
	}

	//DslRegisterRead:
	//	ref=XBoolType "=>" var=XBoolType;
	public DslRegisterReadElements getDslRegisterReadAccess() {
		return (pDslRegisterRead != null) ? pDslRegisterRead : (pDslRegisterRead = new DslRegisterReadElements());
	}
	
	public ParserRule getDslRegisterReadRule() {
		return getDslRegisterReadAccess().getRule();
	}

	////	register=[DslRegister] "=>"(var=[DslVariable])?;
	//DslRegisterWrite:
	//	ref=XBoolType "<=" var=DslValue;
	public DslRegisterWriteElements getDslRegisterWriteAccess() {
		return (pDslRegisterWrite != null) ? pDslRegisterWrite : (pDslRegisterWrite = new DslRegisterWriteElements());
	}
	
	public ParserRule getDslRegisterWriteRule() {
		return getDslRegisterWriteAccess().getRule();
	}

	//DslValue:
	//	HEX | BINARY | INT | XBoolType;
	public DslValueElements getDslValueAccess() {
		return (pDslValue != null) ? pDslValue : (pDslValue = new DslValueElements());
	}
	
	public ParserRule getDslValueRule() {
		return getDslValueAccess().getRule();
	}

	//DslRefVariable:
	//	ref=[DslVariable];
	public DslRefVariableElements getDslRefVariableAccess() {
		return (pDslRefVariable != null) ? pDslRefVariable : (pDslRefVariable = new DslRefVariableElements());
	}
	
	public ParserRule getDslRefVariableRule() {
		return getDslRefVariableAccess().getRule();
	}

	/// * Device Specific * / DslFunction:
	//	"function" type=DslType? name=ID "(" (params+=DslTypedParameter ("," params+=DslTypedParameter)*)? ")" "{"
	//	expressions+=DslExpression* "}";
	public DslFunctionElements getDslFunctionAccess() {
		return (pDslFunction != null) ? pDslFunction : (pDslFunction = new DslFunctionElements());
	}
	
	public ParserRule getDslFunctionRule() {
		return getDslFunctionAccess().getRule();
	}

	//DslTypedParameter:
	//	paramType=DslType name=ID;
	public DslTypedParameterElements getDslTypedParameterAccess() {
		return (pDslTypedParameter != null) ? pDslTypedParameter : (pDslTypedParameter = new DslTypedParameterElements());
	}
	
	public ParserRule getDslTypedParameterRule() {
		return getDslTypedParameterAccess().getRule();
	}

	////DslExpression:
	////	DslCallFunction | DslDefineVariable | DslReturn;
	//DslCallFunction:
	//	(variables=XBoolType "=")? function=[DslOperation|QualifiedName] "(" (params+=XConditionalExpression (","
	//	params+=XConditionalExpression)*)? ")";
	public DslCallFunctionElements getDslCallFunctionAccess() {
		return (pDslCallFunction != null) ? pDslCallFunction : (pDslCallFunction = new DslCallFunctionElements());
	}
	
	public ParserRule getDslCallFunctionRule() {
		return getDslCallFunctionAccess().getRule();
	}

	//DslDefineVariable:
	//	"var" name=ID ("=" val=XBoolType)?;
	public DslDefineVariableElements getDslDefineVariableAccess() {
		return (pDslDefineVariable != null) ? pDslDefineVariable : (pDslDefineVariable = new DslDefineVariableElements());
	}
	
	public ParserRule getDslDefineVariableRule() {
		return getDslDefineVariableAccess().getRule();
	}

	//DslReturn:
	//	"return" val=XBoolType;
	public DslReturnElements getDslReturnAccess() {
		return (pDslReturn != null) ? pDslReturn : (pDslReturn = new DslReturnElements());
	}
	
	public ParserRule getDslReturnRule() {
		return getDslReturnAccess().getRule();
	}

	//DslType:
	//	type=DslCType;
	public DslTypeElements getDslTypeAccess() {
		return (pDslType != null) ? pDslType : (pDslType = new DslTypeElements());
	}
	
	public ParserRule getDslTypeRule() {
		return getDslTypeAccess().getRule();
	}

	//DslVariable:
	//	var=[DslDefineVariable];
	public DslVariableElements getDslVariableAccess() {
		return (pDslVariable != null) ? pDslVariable : (pDslVariable = new DslVariableElements());
	}
	
	public ParserRule getDslVariableRule() {
		return getDslVariableAccess().getRule();
	}

	/// * basics * / Name:
	//	STRING | INT | ID;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//PinName:
	//	Name;
	public PinNameElements getPinNameAccess() {
		return (pPinName != null) ? pPinName : (pPinName = new PinNameElements());
	}
	
	public ParserRule getPinNameRule() {
		return getPinNameAccess().getRule();
	}

	//PackageName:
	//	("this" | ID) ("/" ID)*;
	public PackageNameElements getPackageNameAccess() {
		return (pPackageName != null) ? pPackageName : (pPackageName = new PackageNameElements());
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}

	//DslCType:
	//	"int" | "char" | "byte" | "long" | "float" | "double" | "string" | "void" | "bool";
	public DslCTypeElements getDslCTypeAccess() {
		return (pDslCType != null) ? pDslCType : (pDslCType = new DslCTypeElements());
	}
	
	public ParserRule getDslCTypeRule() {
		return getDslCTypeAccess().getRule();
	}

	//terminal HEX:
	//	"0x" ("A".."F" | "0".."9")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal BINARY:
	//	"0b" "0".."1"+;
	public TerminalRule getBINARYRule() {
		return (tBINARY != null) ? tBINARY : (tBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY"));
	} 

	//DslExpression:
	//	XPrimaryExpression | XBinaryExpression | XBlockExpression | DslCallFunction | DslDefineVariable | DslReturn |
	//	DslRegisterRead | DslRegisterWrite;
	public DslExpressionElements getDslExpressionAccess() {
		return (pDslExpression != null) ? pDslExpression : (pDslExpression = new DslExpressionElements());
	}
	
	public ParserRule getDslExpressionRule() {
		return getDslExpressionAccess().getRule();
	}

	//XBinaryExpression:
	//	left=DslVariable op=XBinaryOperator right=DslExpression;
	public XBinaryExpressionElements getXBinaryExpressionAccess() {
		return (pXBinaryExpression != null) ? pXBinaryExpression : (pXBinaryExpression = new XBinaryExpressionElements());
	}
	
	public ParserRule getXBinaryExpressionRule() {
		return getXBinaryExpressionAccess().getRule();
	}

	//XBinaryOperator:
	//	"+" | "-" | "==" | "!=" | "<" | ">" | "<<" | ">>" | "*" | "/" | "&" | "|";
	public XBinaryOperatorElements getXBinaryOperatorAccess() {
		return (pXBinaryOperator != null) ? pXBinaryOperator : (pXBinaryOperator = new XBinaryOperatorElements());
	}
	
	public ParserRule getXBinaryOperatorRule() {
		return getXBinaryOperatorAccess().getRule();
	}

	//XBlockExpression:
	//	"(" expression=DslExpression ")";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return (pXBlockExpression != null) ? pXBlockExpression : (pXBlockExpression = new XBlockExpressionElements());
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XPrimaryExpression:
	//	XIfExpression | XWhileExpression | XForExpression | XDoWhileExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XConditionalExpression:
	//	XConditionalUnaryExpression | XConditionalBlockExpression | XBoolExpression | XBoolType | XLiteral;
	public XConditionalExpressionElements getXConditionalExpressionAccess() {
		return (pXConditionalExpression != null) ? pXConditionalExpression : (pXConditionalExpression = new XConditionalExpressionElements());
	}
	
	public ParserRule getXConditionalExpressionRule() {
		return getXConditionalExpressionAccess().getRule();
	}

	//XConditionalBlockExpression:
	//	"(" expression=XConditionalExpression ")";
	public XConditionalBlockExpressionElements getXConditionalBlockExpressionAccess() {
		return (pXConditionalBlockExpression != null) ? pXConditionalBlockExpression : (pXConditionalBlockExpression = new XConditionalBlockExpressionElements());
	}
	
	public ParserRule getXConditionalBlockExpressionRule() {
		return getXConditionalBlockExpressionAccess().getRule();
	}

	//XConditionalUnaryExpression:
	//	"!" expression=XConditionalExpression;
	public XConditionalUnaryExpressionElements getXConditionalUnaryExpressionAccess() {
		return (pXConditionalUnaryExpression != null) ? pXConditionalUnaryExpression : (pXConditionalUnaryExpression = new XConditionalUnaryExpressionElements());
	}
	
	public ParserRule getXConditionalUnaryExpressionRule() {
		return getXConditionalUnaryExpressionAccess().getRule();
	}

	//XBoolExpression:
	//	left=XBoolType op=XBoolOperation right=XConditionalExpression;
	public XBoolExpressionElements getXBoolExpressionAccess() {
		return (pXBoolExpression != null) ? pXBoolExpression : (pXBoolExpression = new XBoolExpressionElements());
	}
	
	public ParserRule getXBoolExpressionRule() {
		return getXBoolExpressionAccess().getRule();
	}

	//XBoolOperation:
	//	"||" | "&&" | "==" | "!=" | ">" | "<" | ">=" | "<=" | "&" | "|";
	public XBoolOperationElements getXBoolOperationAccess() {
		return (pXBoolOperation != null) ? pXBoolOperation : (pXBoolOperation = new XBoolOperationElements());
	}
	
	public ParserRule getXBoolOperationRule() {
		return getXBoolOperationAccess().getRule();
	}

	//XBoolType:
	//	XBitAccess | XRegisterAccess | XVariableAccess | XParamVariableAccess;
	public XBoolTypeElements getXBoolTypeAccess() {
		return (pXBoolType != null) ? pXBoolType : (pXBoolType = new XBoolTypeElements());
	}
	
	public ParserRule getXBoolTypeRule() {
		return getXBoolTypeAccess().getRule();
	}

	//XLiteral:
	//	BINARY | HEX | INT;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XBitAccess:
	//	"#" bit=[DslBit|QualifiedName];
	public XBitAccessElements getXBitAccessAccess() {
		return (pXBitAccess != null) ? pXBitAccess : (pXBitAccess = new XBitAccessElements());
	}
	
	public ParserRule getXBitAccessRule() {
		return getXBitAccessAccess().getRule();
	}

	//XRegisterAccess:
	//	"$" reg=[DslRegister];
	public XRegisterAccessElements getXRegisterAccessAccess() {
		return (pXRegisterAccess != null) ? pXRegisterAccess : (pXRegisterAccess = new XRegisterAccessElements());
	}
	
	public ParserRule getXRegisterAccessRule() {
		return getXRegisterAccessAccess().getRule();
	}

	//XVariableAccess:
	//	var=[DslDefineVariable];
	public XVariableAccessElements getXVariableAccessAccess() {
		return (pXVariableAccess != null) ? pXVariableAccess : (pXVariableAccess = new XVariableAccessElements());
	}
	
	public ParserRule getXVariableAccessRule() {
		return getXVariableAccessAccess().getRule();
	}

	//XParamVariableAccess:
	//	"~" var=[DslTypedParameter];
	public XParamVariableAccessElements getXParamVariableAccessAccess() {
		return (pXParamVariableAccess != null) ? pXParamVariableAccess : (pXParamVariableAccess = new XParamVariableAccessElements());
	}
	
	public ParserRule getXParamVariableAccessRule() {
		return getXParamVariableAccessAccess().getRule();
	}

	//XIfExpression:
	//	"if" "(" if=XConditionalExpression ")" "{" then=DslExpression "}" ("else" "{" else=DslExpression "}")?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return (pXIfExpression != null) ? pXIfExpression : (pXIfExpression = new XIfExpressionElements());
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XWhileExpression:
	//	"while" "(" predicate=XConditionalExpression ")" "{" body=DslExpression? "}";
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return (pXWhileExpression != null) ? pXWhileExpression : (pXWhileExpression = new XWhileExpressionElements());
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XForExpression:
	//	"for" "(" init=DslExpression ";" predicate=XConditionalExpression ";" loop=DslExpression ")" "{" body=DslExpression?
	//	"}";
	public XForExpressionElements getXForExpressionAccess() {
		return (pXForExpression != null) ? pXForExpression : (pXForExpression = new XForExpressionElements());
	}
	
	public ParserRule getXForExpressionRule() {
		return getXForExpressionAccess().getRule();
	}

	//XDoWhileExpression:
	//	"do" "{" body=DslExpression "}" "while" "(" predicate=XConditionalExpression ")";
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return (pXDoWhileExpression != null) ? pXDoWhileExpression : (pXDoWhileExpression = new XDoWhileExpressionElements());
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
