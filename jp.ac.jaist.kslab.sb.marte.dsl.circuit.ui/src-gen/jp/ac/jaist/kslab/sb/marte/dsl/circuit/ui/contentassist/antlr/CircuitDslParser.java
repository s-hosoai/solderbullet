/*
* generated by Xtext
*/
package jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jp.ac.jaist.kslab.sb.marte.dsl.circuit.services.CircuitDslGrammarAccess;

public class CircuitDslParser extends AbstractContentAssistParser {
	
	@Inject
	private CircuitDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr.internal.InternalCircuitDslParser createParser() {
		jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr.internal.InternalCircuitDslParser result = new jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr.internal.InternalCircuitDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getHwCircuitDiagramAccess().getGroup(), "rule__HwCircuitDiagram__Group__0");
					put(grammarAccess.getHwCircuitDiagramAccess().getGroup_3(), "rule__HwCircuitDiagram__Group_3__0");
					put(grammarAccess.getHwComponentsAccess().getGroup(), "rule__HwComponents__Group__0");
					put(grammarAccess.getHwComponentsAccess().getGroup_4(), "rule__HwComponents__Group_4__0");
					put(grammarAccess.getHwPackagePinAccess().getGroup(), "rule__HwPackagePin__Group__0");
					put(grammarAccess.getHwCircuitDiagramAccess().getWiresAssignment_2(), "rule__HwCircuitDiagram__WiresAssignment_2");
					put(grammarAccess.getHwCircuitDiagramAccess().getWiresAssignment_3_1(), "rule__HwCircuitDiagram__WiresAssignment_3_1");
					put(grammarAccess.getHwCircuitDiagramAccess().getComponentsAssignment_5(), "rule__HwCircuitDiagram__ComponentsAssignment_5");
					put(grammarAccess.getHwComponentsAccess().getNameAssignment_1(), "rule__HwComponents__NameAssignment_1");
					put(grammarAccess.getHwComponentsAccess().getPinsAssignment_3(), "rule__HwComponents__PinsAssignment_3");
					put(grammarAccess.getHwComponentsAccess().getPinsAssignment_4_1(), "rule__HwComponents__PinsAssignment_4_1");
					put(grammarAccess.getHwPackagePinAccess().getNameAssignment_0(), "rule__HwPackagePin__NameAssignment_0");
					put(grammarAccess.getHwPackagePinAccess().getWireAssignment_2(), "rule__HwPackagePin__WireAssignment_2");
					put(grammarAccess.getHwWireAccess().getNameAssignment(), "rule__HwWire__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr.internal.InternalCircuitDslParser typedParser = (jp.ac.jaist.kslab.sb.marte.dsl.circuit.ui.contentassist.antlr.internal.InternalCircuitDslParser) parser;
			typedParser.entryRuleHwCircuitDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CircuitDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CircuitDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
